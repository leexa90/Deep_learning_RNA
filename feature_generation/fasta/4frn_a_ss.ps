%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:39 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGCUAAAAGCAUGGUGGGAAAGUGACGUGUAAUUCGUCCACAUUACUUGAUACGGUUAUACUCCGAAUGCCACCUAGCCCAAAGUAGAGCAAGGAGACUCA\
) def
/coor [
[191.29801941 275.70700073]
[182.33384705 263.68020630]
[173.36967468 251.65342712]
[164.40550232 239.62663269]
[155.44132996 227.59985352]
[146.47715759 215.57305908]
[143.14576721 230.19844055]
[131.34886169 239.46305847]
[116.35063171 239.23269653]
[104.84382629 229.61015320]
[101.96318054 214.88935852]
[108.99414825 201.63923645]
[122.79926300 195.77249146]
[137.21914673 199.90773010]
[131.00685120 186.25462341]
[124.79454803 172.60151672]
[118.58224487 158.94841003]
[112.36994171 145.29530334]
[100.05635834 136.91528320]
[101.38350677 121.14984131]
[85.85648346 115.78578186]
[78.82575989 100.93887329]
[84.51483917 85.52796936]
[77.80278015 79.07704926]
[77.89925385 71.55770874]
[71.68695068 57.90460205]
[65.17473602 51.25198746]
[65.50047302 43.73908997]
[59.70742798 29.90288353]
[53.91438293 16.06667709]
[48.12133789 2.23046970]
[42.32829285 -11.60573769]
[36.53524780 -25.44194412]
[30.74220085 -39.27815247]
[24.43589973 -46.12626648]
[24.99059868 -53.62573624]
[19.62220001 -67.63217163]
[14.25379944 -81.63861084]
[1.31125569 -85.72014618]
[-6.75559139 -96.38891602]
[-7.14420652 -109.56277466]
[0.06266078 -120.36296844]
[-4.87609959 -134.52661133]
[-18.63937950 -142.76988220]
[-20.63289833 -158.68859863]
[-9.32739735 -170.07127380]
[6.60450888 -168.18609619]
[14.94122601 -154.47920227]
[9.28753853 -139.46536255]
[14.22629929 -125.30172729]
[29.61819839 -118.71917725]
[35.68325043 -102.75672150]
[28.26023674 -87.00701141]
[33.62863541 -73.00057220]
[38.99703598 -58.99413681]
[44.57840729 -45.07119751]
[50.37145233 -31.23498917]
[56.16449738 -17.39878273]
[61.95754623 -3.56257582]
[67.75058746 10.27363110]
[73.54363251 24.10983849]
[79.33668518 37.94604492]
[85.34004974 51.69229889]
[91.55235291 65.34540558]
[97.97214508 78.90218353]
[110.46428680 81.56827545]
[119.15576935 90.92881775]
[120.88981628 103.58404541]
[115.03661346 114.93753815]
[127.79454803 124.29412079]
[126.02304840 139.08300781]
[132.23535156 152.73611450]
[138.44766235 166.38922119]
[144.65995789 180.04232788]
[150.87225342 193.69543457]
[158.50393677 206.60888672]
[167.46810913 218.63568115]
[176.43229675 230.66246033]
[185.39646912 242.68925476]
[194.36064148 254.71603394]
[203.32481384 266.74282837]
[213.30035400 265.25387573]
[223.05290222 267.58538818]
[231.18070984 273.35720825]
[236.53240967 281.69796753]
[238.37005615 291.37640381]
[236.47067261 300.98312378]
[231.15223694 309.13577271]
[238.58609009 322.16409302]
[246.01995850 335.19244385]
[261.45776367 336.75894165]
[273.00399780 347.12542725]
[276.21887207 362.30581665]
[269.86624146 376.46292114]
[256.38879395 384.15304565]
[240.96888733 382.41918945]
[229.53579712 371.92803955]
[226.48577881 356.71365356]
[232.99162292 342.62631226]
[225.55775452 329.59796143]
[218.12388611 316.56964111]
[198.12796021 313.14782715]
] def
/pairs [
[1 81]
[2 80]
[3 79]
[4 78]
[5 77]
[6 76]
[14 75]
[15 74]
[16 73]
[17 72]
[18 71]
[20 69]
[23 65]
[25 64]
[26 63]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[36 55]
[37 54]
[38 53]
[42 50]
[43 49]
[88 101]
[89 100]
[90 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
