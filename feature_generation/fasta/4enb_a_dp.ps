%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:38 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (4enb_a)
} def

/sequence { (\
GGCGAUGAGGCCCGCCCAAACUGCCCUGAAAAGGGCUGAUGGCCUCUACUG\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 6 0.023061524 ubox
1 11 0.005147615 ubox
1 12 0.249113912 ubox
1 13 0.034960400 ubox
1 16 0.048464071 ubox
1 17 0.005315890 ubox
1 44 0.071494668 ubox
1 47 0.012035548 ubox
1 49 0.128998377 ubox
1 50 0.272042257 ubox
2 6 0.008721309 ubox
2 11 0.251051747 ubox
2 12 0.025720678 ubox
2 15 0.051229550 ubox
2 16 0.003789283 ubox
2 43 0.071612305 ubox
2 46 0.007917332 ubox
2 47 0.018682234 ubox
2 49 0.287117640 ubox
2 50 0.054110889 ubox
3 9 0.010135574 ubox
3 10 0.251984883 ubox
3 14 0.051383670 ubox
3 42 0.071597025 ubox
3 51 0.142121328 ubox
4 11 0.009050537 ubox
4 13 0.051250886 ubox
4 46 0.015191621 ubox
4 47 0.062711986 ubox
4 49 0.329730274 ubox
4 50 0.124605035 ubox
5 40 0.069652222 ubox
5 45 0.011917300 ubox
5 47 0.189411591 ubox
5 50 0.050987405 ubox
6 18 0.007787467 ubox
6 39 0.068054877 ubox
6 48 0.132407616 ubox
6 51 0.009473630 ubox
7 12 0.005065668 ubox
7 17 0.012952143 ubox
7 46 0.961192338 ubox
7 47 0.023485609 ubox
7 49 0.007201222 ubox
8 22 0.003450714 ubox
8 37 0.047373955 ubox
8 45 0.963089711 ubox
8 47 0.008161204 ubox
8 50 0.005594407 ubox
9 15 0.003491888 ubox
9 16 0.020407952 ubox
9 17 0.015731157 ubox
9 21 0.003709108 ubox
9 36 0.031856738 ubox
9 37 0.048461532 ubox
9 44 0.963492648 ubox
9 46 0.008318737 ubox
9 49 0.005727288 ubox
10 15 0.020349236 ubox
10 16 0.015633572 ubox
10 36 0.057581345 ubox
10 43 0.963370430 ubox
10 45 0.007925138 ubox
11 34 0.009798575 ubox
11 35 0.064938846 ubox
11 42 0.952414044 ubox
12 33 0.009744172 ubox
12 34 0.064944604 ubox
12 38 0.009594459 ubox
12 41 0.939306934 ubox
12 42 0.130384780 ubox
13 23 0.003225435 ubox
13 33 0.064926289 ubox
13 38 0.199258183 ubox
13 41 0.184223980 ubox
13 51 0.003264012 ubox
14 21 0.084118387 ubox
14 22 0.010490321 ubox
14 24 0.011066955 ubox
14 36 0.155288510 ubox
14 37 0.177414176 ubox
14 40 0.205054255 ubox
14 43 0.232184545 ubox
14 44 0.074475556 ubox
14 45 0.003427462 ubox
14 46 0.017075829 ubox
15 23 0.011203639 ubox
15 35 0.156770269 ubox
15 38 0.316854807 ubox
15 41 0.012613604 ubox
15 42 0.224822590 ubox
16 28 0.003644762 ubox
16 34 0.156741698 ubox
16 38 0.105156640 ubox
16 41 0.215930289 ubox
16 42 0.132380780 ubox
17 23 0.007158012 ubox
17 28 0.050068830 ubox
17 33 0.156484761 ubox
17 38 0.560535045 ubox
17 41 0.163360684 ubox
17 42 0.010639867 ubox
18 22 0.012829444 ubox
18 27 0.049635844 ubox
18 37 0.560466721 ubox
18 40 0.203312668 ubox
19 27 0.009170616 ubox
19 37 0.105988146 ubox
19 40 0.227322373 ubox
20 27 0.010407946 ubox
20 37 0.094304669 ubox
20 40 0.127337717 ubox
21 28 0.079954069 ubox
21 33 0.004303591 ubox
21 38 0.408027666 ubox
21 41 0.003340964 ubox
21 42 0.005712516 ubox
22 28 0.012808537 ubox
22 29 0.027842997 ubox
22 30 0.011559547 ubox
22 31 0.010518541 ubox
22 32 0.008193380 ubox
22 38 0.039915690 ubox
22 39 0.018965387 ubox
22 41 0.005795716 ubox
23 27 0.008880930 ubox
23 36 0.984382266 ubox
23 37 0.010959224 ubox
24 28 0.012817690 ubox
24 35 0.985423665 ubox
25 34 0.985433222 ubox
26 33 0.985391304 ubox
27 31 0.010401834 ubox
27 32 0.975480296 ubox
27 33 0.003356204 ubox
38 46 0.007437049 ubox
38 49 0.003821058 ubox
39 45 0.007153987 ubox
40 48 0.007606674 ubox
40 51 0.004245656 ubox
41 46 0.003851336 ubox
41 47 0.008341787 ubox
41 49 0.006021152 ubox
41 50 0.009249749 ubox
42 46 0.008268639 ubox
42 49 0.009754403 ubox
44 51 0.021404637 ubox
46 51 0.017154719 ubox
47 51 0.005192019 ubox
7 46 0.9500000 lbox
8 45 0.9500000 lbox
9 44 0.9500000 lbox
10 43 0.9500000 lbox
11 42 0.9500000 lbox
12 41 0.9500000 lbox
17 38 0.9500000 lbox
18 37 0.9500000 lbox
23 36 0.9500000 lbox
24 35 0.9500000 lbox
25 34 0.9500000 lbox
26 33 0.9500000 lbox
27 32 0.9500000 lbox
showpage
end
%%EOF
