%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:26 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (1yls_b)
} def

/sequence { (\
GGCGAGGCCGUGCCGGCUCUUCGGAGCAAUACUCGGC\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 8 0.007502797 ubox
1 9 0.591438537 ubox
1 11 0.005513002 ubox
1 14 0.196647279 ubox
1 18 0.017505892 ubox
1 19 0.008582969 ubox
1 20 0.005753255 ubox
1 21 0.003809310 ubox
1 22 0.048379595 ubox
1 27 0.009514965 ubox
1 34 0.004752683 ubox
1 37 0.400209786 ubox
2 8 0.591873995 ubox
2 9 0.004782550 ubox
2 11 0.126598950 ubox
2 13 0.196794892 ubox
2 17 0.021595511 ubox
2 19 0.006566299 ubox
2 20 0.005781663 ubox
2 21 0.046257144 ubox
2 22 0.019428249 ubox
2 27 0.017677324 ubox
2 33 0.003878869 ubox
2 37 0.067195670 ubox
3 7 0.587579613 ubox
3 10 0.130758125 ubox
3 12 0.196708345 ubox
3 15 0.005748102 ubox
3 16 0.021610887 ubox
3 23 0.165035852 ubox
3 24 0.003712226 ubox
3 26 0.017384346 ubox
3 35 0.446447616 ubox
3 36 0.050093552 ubox
4 8 0.004217061 ubox
4 9 0.129606771 ubox
4 11 0.153770612 ubox
4 14 0.004681335 ubox
4 19 0.063365300 ubox
4 20 0.008881209 ubox
4 21 0.061092853 ubox
4 22 0.166800473 ubox
4 34 0.449807072 ubox
4 37 0.003651198 ubox
5 11 0.018809401 ubox
5 18 0.060021410 ubox
5 20 0.098333272 ubox
5 21 0.146700312 ubox
5 33 0.449046658 ubox
6 11 0.005725879 ubox
6 13 0.004762810 ubox
6 14 0.089802873 ubox
6 17 0.042902281 ubox
6 18 0.121007308 ubox
6 19 0.122302293 ubox
6 20 0.055030581 ubox
6 32 0.441372001 ubox
6 33 0.006741088 ubox
6 34 0.003741367 ubox
6 37 0.031164944 ubox
7 13 0.103508423 ubox
7 14 0.010044295 ubox
7 17 0.191570416 ubox
7 18 0.013693633 ubox
7 19 0.026215769 ubox
7 27 0.019124161 ubox
7 30 0.029159180 ubox
7 32 0.010481825 ubox
7 37 0.583397663 ubox
8 12 0.102890122 ubox
8 15 0.013921337 ubox
8 16 0.199185303 ubox
8 26 0.018767448 ubox
8 36 0.590985589 ubox
9 15 0.202487652 ubox
9 26 0.007804669 ubox
9 35 0.591032989 ubox
10 14 0.189506395 ubox
10 17 0.006323485 ubox
10 27 0.387522738 ubox
10 30 0.019910305 ubox
10 32 0.077290124 ubox
10 33 0.006121275 ubox
10 34 0.588177608 ubox
10 37 0.007488805 ubox
11 16 0.006260887 ubox
11 25 0.023803653 ubox
11 26 0.369666981 ubox
11 28 0.129845872 ubox
11 29 0.017912280 ubox
11 31 0.085987345 ubox
11 35 0.003443215 ubox
11 36 0.005634007 ubox
12 27 0.128982919 ubox
12 30 0.078068105 ubox
12 32 0.415838929 ubox
12 33 0.017716073 ubox
12 34 0.004837932 ubox
12 37 0.595903482 ubox
13 24 0.410922470 ubox
13 26 0.109015508 ubox
13 36 0.602822928 ubox
14 23 0.419193328 ubox
14 24 0.071215445 ubox
14 26 0.004695251 ubox
14 35 0.602859610 ubox
15 21 0.003277042 ubox
15 22 0.418196269 ubox
15 27 0.016181365 ubox
15 30 0.019990240 ubox
15 32 0.021074840 ubox
15 33 0.012927409 ubox
15 34 0.601083193 ubox
16 20 0.009350861 ubox
16 21 0.295694904 ubox
16 22 0.052049224 ubox
16 27 0.875969792 ubox
16 30 0.003449590 ubox
16 32 0.035614509 ubox
16 33 0.085772014 ubox
16 37 0.005046785 ubox
17 23 0.012113542 ubox
17 24 0.018637767 ubox
17 26 0.881598220 ubox
17 36 0.005101218 ubox
18 23 0.016980784 ubox
18 24 0.006722992 ubox
18 25 0.882189472 ubox
18 31 0.005154402 ubox
18 35 0.004761849 ubox
19 23 0.012675636 ubox
19 24 0.881536693 ubox
19 26 0.007991422 ubox
20 25 0.007506440 ubox
20 29 0.007206754 ubox
21 28 0.007076317 ubox
21 36 0.024940422 ubox
22 35 0.038504359 ubox
22 36 0.058152660 ubox
23 27 0.003569090 ubox
23 32 0.008292923 ubox
23 33 0.003318833 ubox
23 34 0.034326466 ubox
24 32 0.007428489 ubox
24 33 0.027154022 ubox
24 34 0.181695438 ubox
25 30 0.005718506 ubox
25 33 0.182780850 ubox
26 32 0.182359657 ubox
26 37 0.034031706 ubox
27 35 0.004480503 ubox
27 36 0.034309380 ubox
28 33 0.018799838 ubox
29 33 0.010768110 ubox
30 35 0.003252519 ubox
30 36 0.003663253 ubox
32 36 0.006467580 ubox
1 9 0.9500000 lbox
2 8 0.9500000 lbox
3 7 0.9500000 lbox
12 37 0.9500000 lbox
13 36 0.9500000 lbox
14 35 0.9500000 lbox
15 34 0.9500000 lbox
16 27 0.9500000 lbox
17 26 0.9500000 lbox
18 25 0.9500000 lbox
19 24 0.9500000 lbox
showpage
end
%%EOF
