%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:31 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGAACAUUGAGCCUUGAUGUGUAGGAUAGGUGGGAGGCUUUGAAGUGUGGACGCCAGUCUGCAUGGAGCCGACCUUGAAAUACCACCCUUUAAUGUUUGAUGUUCUAA\
) def
/coor [
[100.05885315 409.31628418]
[109.61403656 396.42916870]
[108.74985504 381.45410156]
[107.88567352 366.47900391]
[107.02149963 351.50390625]
[106.15731812 336.52883911]
[105.29313660 321.55374146]
[104.42895508 306.57867432]
[103.56478119 291.60357666]
[102.70059967 276.62847900]
[101.83641815 261.65341187]
[100.97223663 246.67831421]
[92.51454926 234.41793823]
[99.44393921 220.19493103]
[98.57975769 205.21984863]
[97.71558380 190.24476624]
[96.85140228 175.26968384]
[88.39370728 163.00930786]
[95.32310486 148.78628540]
[86.86540985 136.52592468]
[93.79479980 122.30290985]
[92.93062592 107.32781982]
[89.31214142 99.97650146]
[92.26364899 91.90992737]
[91.83137512 76.91616058]
[91.18308258 61.93017578]
[90.31890869 46.95508957]
[75.52567291 39.73284531]
[66.40814972 26.13850021]
[65.35204315 9.89743328]
[72.54919434 -4.59595442]
[85.97100067 -13.46723175]
[84.67562866 -28.41119385]
[72.86033630 -38.56189346]
[71.75952911 -53.73564911]
[81.50948334 -64.93716431]
[80.21411133 -79.88112640]
[78.91873932 -94.82508850]
[77.62336731 -109.76905060]
[76.32799530 -124.71301270]
[75.03262329 -139.65698242]
[71.84934235 -144.17784119]
[70.92309570 -148.98519897]
[71.96234894 -153.13131714]
[74.32829285 -155.93833923]
[74.32829285 -170.93833923]
[74.32829285 -185.93833923]
[74.32829285 -200.93833923]
[74.32829285 -215.93833923]
[74.32829285 -230.93833923]
[74.32829285 -245.93833923]
[74.32829285 -260.93832397]
[65.66458893 -274.86215210]
[73.62871552 -289.19757080]
[90.02787018 -289.19757080]
[97.99199677 -274.86215210]
[89.32829285 -260.93832397]
[89.32829285 -245.93833923]
[89.32829285 -230.93833923]
[89.32829285 -215.93833923]
[89.32829285 -200.93833923]
[89.32829285 -185.93833923]
[89.32829285 -170.93833923]
[89.32829285 -155.93833923]
[89.97658539 -140.95234680]
[91.27195740 -126.00838470]
[92.56732941 -111.06442261]
[93.86270142 -96.12046051]
[95.15807343 -81.17649841]
[96.45344543 -66.23253632]
[107.98543549 -56.87578201]
[109.51200867 -41.73893356]
[99.61959076 -29.70656586]
[100.91496277 -14.76260471]
[113.71214294 -9.76581383]
[123.12924957 0.32797810]
[127.26708984 13.56747818]
[125.25472260 27.35895538]
[117.43204498 38.97435379]
[105.29399109 46.09090805]
[106.15817261 61.06599426]
[109.73979950 67.66233063]
[106.82514954 76.48388672]
[107.25741577 91.47766113]
[107.90570831 106.46364594]
[108.76988983 121.43872833]
[117.28939056 134.77021790]
[110.29818726 147.92211914]
[118.81769562 161.25360107]
[111.82648468 174.40550232]
[112.69066620 189.38058472]
[113.55484772 204.35566711]
[114.41902924 219.33074951]
[122.93852997 232.66224670]
[115.94732666 245.81413269]
[116.81150818 260.78921509]
[117.67568207 275.76431274]
[118.53986359 290.73937988]
[119.40404510 305.71447754]
[120.26822662 320.68957520]
[121.13240051 335.66464233]
[121.99658203 350.63973999]
[122.86076355 365.61483765]
[123.72494507 380.58990479]
[124.58911896 395.56500244]
[135.56332397 407.26742554]
[133.11380005 423.12237549]
[119.11963654 430.96728516]
] def
/pairs [
[2 105]
[3 104]
[4 103]
[5 102]
[6 101]
[7 100]
[8 99]
[9 98]
[10 97]
[11 96]
[12 95]
[14 93]
[15 92]
[16 91]
[17 90]
[19 88]
[21 86]
[22 85]
[24 84]
[25 83]
[26 81]
[27 80]
[32 74]
[33 73]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[52 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
