%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:05:10 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CACGUCCCUCUCCAAACGAGAGAACAUGCAUGGGCUGGCAUGAGCGCGUGGGGCCCCGAGGCGCUGAACCUUGAGGCCUCAUGCUGGGACU\
) def
/coor [
[102.40390015 218.82885742]
[88.49407959 210.83532715]
[86.21358490 194.95518494]
[97.31180573 183.37031555]
[98.33544159 168.40528870]
[99.35907745 153.44024658]
[100.38271332 138.47521973]
[101.40634918 123.51019287]
[88.59005737 115.71643066]
[75.77376556 123.51019287]
[62.95747375 131.30395508]
[50.14118576 139.09770203]
[44.96105957 154.28144836]
[29.81213760 159.56251526]
[16.31537819 150.88973999]
[14.82433796 134.91613770]
[26.48281479 123.89526367]
[42.34742355 126.28141785]
[55.16371536 118.48765564]
[67.98001099 110.69390106]
[80.79629517 102.90013885]
[82.07528687 87.95476532]
[66.52416229 88.84940338]
[55.19901276 78.69087982]
[54.44194794 63.85974503]
[43.13625336 54.00168991]
[31.83055878 44.14363480]
[20.52486229 34.28557968]
[9.21916771 24.42752647]
[-5.87482262 28.02628708]
[-20.18844986 22.03465080]
[-28.21783257 8.75652504]
[-26.87550926 -6.70238113]
[-16.67762947 -18.39780235]
[-1.54548848 -21.83261108]
[12.70229912 -15.68605328]
[20.58716583 -2.32160473]
[19.07722282 13.12183094]
[30.38291740 22.97988510]
[41.68861389 32.83794022]
[52.99430847 42.69599533]
[64.30000305 52.55405045]
[79.09608459 51.28455734]
[90.70209503 61.12097168]
[91.93334198 76.64907074]
[106.56535339 79.95120239]
[121.00911713 75.90425110]
[135.45288086 71.85729980]
[149.89663696 67.81034851]
[164.34039307 63.76339722]
[178.78414917 59.71644592]
[193.22790527 55.66949463]
[207.67167664 51.62254333]
[222.11543274 47.57559204]
[236.55918884 43.52864075]
[247.76011658 32.35501862]
[262.10293579 36.37162018]
[276.54669189 32.32466888]
[290.99044800 28.27771759]
[305.43420410 24.23076630]
[319.87796021 20.18381500]
[326.15966797 5.86340714]
[340.19955444 -1.02247763]
[355.36843872 2.77746487]
[364.50399780 15.46901798]
[363.29272461 31.05961800]
[352.30654907 42.18786240]
[336.73278809 43.59933090]
[323.92492676 34.62757492]
[309.48114014 38.67452621]
[295.03738403 42.72147751]
[280.59362793 46.76842880]
[266.14987183 50.81538010]
[255.98207092 61.69953918]
[240.60614014 57.97240067]
[226.16238403 62.01935196]
[211.71862793 66.06629944]
[197.27485657 70.11325073]
[182.83110046 74.16020966]
[168.38734436 78.20716095]
[153.94358826 82.25411224]
[139.49983215 86.30106354]
[125.05606842 90.34801483]
[110.61230469 94.39496613]
[120.11219025 105.09729004]
[116.37138367 124.53382874]
[115.34774780 139.49885559]
[114.32410431 154.46388245]
[113.30046844 169.42892456]
[112.27683258 184.39395142]
[121.69421387 197.38212585]
] def
/pairs [
[4 90]
[5 89]
[6 88]
[7 87]
[8 86]
[9 21]
[10 20]
[11 19]
[12 18]
[22 45]
[25 42]
[26 41]
[27 40]
[28 39]
[29 38]
[46 84]
[47 83]
[48 82]
[49 81]
[50 80]
[51 79]
[52 78]
[53 77]
[54 76]
[55 75]
[57 73]
[58 72]
[59 71]
[60 70]
[61 69]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
