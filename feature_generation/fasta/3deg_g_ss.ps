%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CCCAGACAGCCAGGAUGUUGGCUUAGAAGCAGCCAUCAUUUAAAGAAAGCGUAAUAGCUCACUGGUCGAG\
) def
/coor [
[87.87910461 239.76770020]
[72.65830994 240.26499939]
[58.55360031 234.52244568]
[48.00868988 223.53497314]
[42.85055542 209.20620728]
[43.97287369 194.01869202]
[51.18119812 180.60379028]
[63.22664261 171.28567505]
[78.02225494 167.67878723]
[80.66328430 152.91311646]
[83.30431366 138.14744568]
[85.94534302 123.38177490]
[88.58636475 108.61611176]
[84.33144379 94.23224640]
[74.08260345 83.27955627]
[63.83376694 72.32687378]
[53.58493042 61.37418365]
[38.50626755 56.58414459]
[35.45989990 42.00440216]
[25.21106148 31.05171394]
[14.96222401 20.09902763]
[4.71338654 9.14634228]
[-5.53545046 -1.80634391]
[-21.13934708 -0.78045559]
[-33.72142410 -10.06621552]
[-37.34080887 -25.27917290]
[-30.28854179 -39.23623276]
[-15.89448547 -45.34730148]
[-0.95507294 -40.72691345]
[7.47576141 -27.55668068]
[5.41723537 -12.05518150]
[15.66607285 -1.10249519]
[25.91490936 9.85019112]
[36.16374588 20.80287743]
[46.41258621 31.75556374]
[60.75818253 35.76219559]
[64.53761292 51.12534714]
[74.78645325 62.07803345]
[85.03529358 73.03072357]
[95.28412628 83.98340607]
[90.64398956 69.71914673]
[95.70632935 55.59920502]
[108.35263824 47.53255081]
[123.29064178 48.89494705]
[134.26902771 59.11625290]
[136.69351196 73.91902161]
[129.54949951 87.10852814]
[115.82537842 93.16529083]
[130.82171631 93.49711609]
[145.81803894 93.82894897]
[157.06315613 82.72386169]
[172.86637878 82.90641022]
[183.85195923 94.26830292]
[183.50233459 110.06872559]
[172.02493286 120.93356323]
[156.22909546 120.41690826]
[145.48620605 108.82527924]
[130.48988342 108.49344635]
[115.49354553 108.16161346]
[111.40306091 110.63059235]
[107.20122528 111.61668396]
[103.35203552 111.25713348]
[100.71100616 126.02280426]
[98.06998444 140.78846741]
[95.42895508 155.55413818]
[92.78792572 170.31980896]
[105.41593170 178.83175659]
[113.48456573 191.74752808]
[115.59587860 206.82939148]
[111.38407898 221.46429443]
] def
/pairs [
[9 66]
[10 65]
[11 64]
[12 63]
[13 62]
[14 40]
[15 39]
[16 38]
[17 37]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[48 59]
[49 58]
[50 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
