%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCUGUUGGUUCUCUGUGCUCUGUGCUCUGUUUACCAGGUCAGGUCCGAAAGGAAGCAGCCAAGGCAGAGACGCAGAGCAGGCAGAUGUAGCUGGC\
) def
/coor [
[92.29947662 318.41683960]
[75.97929382 316.80944824]
[69.45863342 301.76242065]
[79.44538879 288.75485229]
[80.91564178 273.82708740]
[82.38590240 258.89929199]
[83.85615540 243.97152710]
[85.32641602 229.04376221]
[86.79666901 214.11598206]
[88.26692963 199.18821716]
[89.49274445 184.23838806]
[90.22875977 169.25645447]
[90.71954346 154.26449585]
[91.21033478 139.27252197]
[91.70111847 124.28054810]
[92.19190216 109.28858185]
[92.19190216 94.28858185]
[91.70111847 79.29661560]
[91.21033478 64.30464172]
[90.71954346 49.31267548]
[90.22875977 34.32070923]
[89.73797607 19.32873917]
[89.24718475 4.33677006]
[88.75640106 -10.65519905]
[88.02038574 -25.63713074]
[87.03933716 -40.60501480]
[86.05829620 -55.57289886]
[85.07724762 -70.54077911]
[84.09619904 -85.50866699]
[83.11515045 -100.47654724]
[82.13410187 -115.44443512]
[81.15306091 -130.41232300]
[73.01386261 -135.82803345]
[68.45320892 -144.31733704]
[68.43164825 -153.81454468]
[72.82284546 -162.07795715]
[80.47433472 -167.21888733]
[80.96511841 -182.21084595]
[81.45590973 -197.20281982]
[68.52159119 -205.36680603]
[61.45693970 -218.81996155]
[62.07059860 -233.90272522]
[70.09770203 -246.56849670]
[83.29788208 -253.46928406]
[83.78866577 -268.46124268]
[84.27945709 -283.45321655]
[76.07596588 -297.65304565]
[84.50486755 -311.72021484]
[100.89524078 -311.18365479]
[108.38606262 -296.59530640]
[99.27142334 -282.96243286]
[98.78063965 -267.97045898]
[98.28984833 -252.97850037]
[111.01042938 -245.22915649]
[118.19197083 -232.06550598]
[117.81785583 -216.97489929]
[109.88845062 -204.01258850]
[96.44787598 -196.71203613]
[95.95709229 -181.72006226]
[95.46630096 -166.72808838]
[106.96266174 -149.72224426]
[96.12094116 -131.39337158]
[97.10198975 -116.42548370]
[98.08303833 -101.45759583]
[99.06407928 -86.48971558]
[100.04512787 -71.52182770]
[101.02617645 -56.55394363]
[102.00722504 -41.58605957]
[102.98827362 -26.61817741]
[106.63784790 -20.02198792]
[103.74836731 -11.14598465]
[104.23915863 3.84598374]
[104.72994232 18.83795357]
[105.22072601 33.82992172]
[105.71151733 48.82189178]
[106.20230103 63.81385803]
[106.69308472 78.80582428]
[107.18387604 93.79779816]
[110.23555756 98.32311249]
[110.41920471 104.25148010]
[107.18387604 109.77936554]
[106.69308472 124.77133942]
[106.20230103 139.76330566]
[105.71151733 154.75527954]
[105.22072601 169.74723816]
[108.11020660 178.62324524]
[104.46063232 185.21943665]
[107.05814362 194.18522644]
[103.19470215 200.65847778]
[101.72444153 215.58624268]
[100.25418854 230.51402283]
[98.78392792 245.44178772]
[97.31367493 260.36956787]
[95.84341431 275.29733276]
[94.37316132 290.22509766]
] def
/pairs [
[4 95]
[5 94]
[6 93]
[7 92]
[8 91]
[9 90]
[10 89]
[11 87]
[12 85]
[13 84]
[14 83]
[15 82]
[16 81]
[17 78]
[18 77]
[19 76]
[20 75]
[21 74]
[22 73]
[23 72]
[24 71]
[25 69]
[26 68]
[27 67]
[28 66]
[29 65]
[30 64]
[31 63]
[32 62]
[37 60]
[38 59]
[39 58]
[44 53]
[45 52]
[46 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
