%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:05:06 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUCGAAUCGCCACCUACAAGACUGGAGCUUGCUCCCUCGAAGGCGCCAAGUAUAUUCAUGAUCACAAGAAA\
) def
/coor [
[161.84036255 248.50372314]
[164.09043884 233.54403687]
[170.85502625 220.01275635]
[181.47135925 209.23551941]
[174.54512024 195.93035889]
[167.61889648 182.62519836]
[160.69267273 169.32003784]
[151.56124878 157.41973877]
[140.50209045 147.28588867]
[129.44291687 137.15203857]
[118.38376617 127.01818085]
[108.89342499 131.44601440]
[98.48978424 132.64451599]
[88.24122620 130.49058533]
[79.20024109 125.20545197]
[72.29527283 117.33184814]
[68.23543549 107.67835236]
[67.43764496 97.23633575]
[69.98383331 87.07813263]
[75.61252594 78.24693298]
[67.00888062 65.95964813]
[54.27682877 62.86573029]
[47.39909744 52.19224930]
[49.69254303 40.11565399]
[41.63304901 27.46478462]
[33.57355499 14.81391239]
[25.51406097 2.16304088]
[10.72591400 -4.92517185]
[9.74036884 -21.29467773]
[23.57126999 -30.10593414]
[37.99057007 -22.29467392]
[38.16493225 -5.89645338]
[46.22442627 6.75441837]
[54.28392029 19.40529060]
[62.34341431 32.05615997]
[78.25974274 39.11877823]
[79.29616547 57.35600281]
[87.89981079 69.64328766]
[107.63378906 68.22469330]
[124.56969452 78.45295715]
[132.49987793 96.57903290]
[128.51762390 115.95902252]
[139.57678223 126.09287262]
[150.63594055 136.22673035]
[161.69509888 146.36058044]
[162.63076782 131.38978577]
[171.92893982 119.61931610]
[186.27642822 115.24330139]
[200.56085205 119.82102203]
[209.69226074 131.72132874]
[210.41693115 146.70381165]
[202.47660828 159.42982483]
[188.70066833 165.36474609]
[173.99783325 162.39381409]
[180.92405701 175.69897461]
[187.85028076 189.00413513]
[194.77651978 202.30929565]
[209.69398499 199.79446411]
[224.65815735 202.01448059]
[238.20301819 208.75184631]
[249.00157166 219.34649658]
[255.99588013 232.76046753]
[258.50070190 247.67962646]
[256.27066040 262.64230347]
[249.52423096 276.18264771]
[238.92234802 286.97409058]
[225.50369263 293.95941162]
[210.58285522 296.45425415]
[195.62167358 294.21417236]
[182.08584595 287.45867920]
[171.30151367 276.84957886]
] def
/pairs [
[4 57]
[5 56]
[6 55]
[7 54]
[8 45]
[9 44]
[10 43]
[11 42]
[20 38]
[21 37]
[24 35]
[25 34]
[26 33]
[27 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
