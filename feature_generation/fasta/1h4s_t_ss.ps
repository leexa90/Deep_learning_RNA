%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:26 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGAGUAGCGCAGCCCGGUAGCGCACCUCGUUCGGGACGAGGGGGGCGCUGGUUCAGAUCCAGUCUCC\
) def
/coor [
[121.78657532 115.05495453]
[115.24090576 120.90792084]
[107.31311798 124.18276215]
[98.95095062 124.63311005]
[91.10769653 122.34192657]
[84.63359070 117.69730377]
[80.18373871 111.33421326]
[65.43914795 114.09045410]
[50.69454956 116.84670258]
[35.94995117 119.60294342]
[30.23144150 133.93132019]
[17.66096306 142.87483215]
[2.24970794 143.57966614]
[-11.08464622 135.82089233]
[-18.08715630 122.07431793]
[-16.52334595 106.72641754]
[-6.89222336 94.67465210]
[7.73295689 89.76469421]
[22.68535233 93.56330109]
[33.19371033 104.85834503]
[47.93830490 102.10210419]
[62.68290329 99.34586334]
[77.42749786 96.58961487]
[86.55785370 78.60849762]
[108.15368652 73.52719879]
[106.76966095 58.59118652]
[105.38563538 43.65517426]
[104.00160980 28.71916199]
[102.61758423 13.78314972]
[101.23355865 -1.15286255]
[99.84953308 -16.08887482]
[92.36753082 -31.30255508]
[104.91543579 -42.70372009]
[119.34464264 -33.80235291]
[114.78554535 -17.47290039]
[116.16957092 -2.53688788]
[117.55359650 12.39912510]
[118.93762207 27.33513832]
[120.32164764 42.27114868]
[121.70567322 57.20716095]
[123.08969879 72.14317322]
[132.40328979 83.90144348]
[146.62570190 88.66831970]
[160.84811401 93.43518829]
[175.07052612 98.20205688]
[184.55459595 97.98988342]
[189.83078003 103.53149414]
[203.81787109 108.95011902]
[217.80494690 114.36874390]
[231.79203796 119.78736877]
[245.77911377 125.20599365]
[259.39120483 117.50889587]
[274.75674438 120.41305542]
[284.62060547 132.54722595]
[284.32537842 148.18202209]
[274.01046753 159.93518066]
[258.54623413 162.25718689]
[245.23443604 154.05169678]
[240.36048889 139.19308472]
[226.37341309 133.77444458]
[212.38632202 128.35581970]
[198.39924622 122.93720245]
[184.41215515 117.51857758]
[170.30364990 112.42446899]
[156.08123779 107.65760040]
[141.85882568 102.89072418]
[127.63642120 98.12385559]
] def
/pairs [
[7 23]
[8 22]
[9 21]
[10 20]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[42 67]
[43 66]
[44 65]
[45 64]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
