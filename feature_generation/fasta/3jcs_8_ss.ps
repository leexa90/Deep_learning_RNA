%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:34 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCGAGUACGACCAUACUUGAGUGAAAACACCAUAUCCCGUCCGAUUUGUGAAGUUAAGCACUCACAGGCUCAGUUAGUACUGAGGUCAGUGAUGACUCGGGAACCCUGAGUGCCGUACUC\
) def
/coor [
[91.89727020 255.90005493]
[78.89833832 245.01593018]
[85.75863647 229.51197815]
[86.53719330 214.53219604]
[87.31575012 199.55241394]
[88.09430695 184.57263184]
[88.87286377 169.59284973]
[89.65142059 154.61306763]
[90.42998505 139.63328552]
[81.00938416 136.07963562]
[72.74687958 130.32574463]
[66.14633942 122.72251892]
[61.61027908 113.73361969]
[59.41531372 103.90721130]
[59.69530106 93.84253693]
[62.43316650 84.15335083]
[49.92070007 75.88061523]
[37.30189896 67.77100372]
[24.57888412 59.82588577]
[11.85587025 51.88076401]
[-0.86714357 43.93564606]
[-13.59015751 35.99052811]
[-26.31317139 28.04540825]
[-43.21747589 32.31563187]
[-57.72711182 23.26841736]
[-61.19297409 6.86760139]
[-74.11795807 -0.74454206]
[-87.04294586 -8.35668564]
[-102.16470337 -4.61901808]
[-115.16403961 -12.52293491]
[-118.63414764 -26.96225548]
[-131.55912781 -34.57439804]
[-144.48411560 -42.18654251]
[-157.40910339 -49.79868698]
[-170.06529236 -41.26736069]
[-185.17097473 -39.08071518]
[-199.72688293 -43.67290878]
[-210.84294128 -54.13216400]
[-216.31204224 -68.38178253]
[-215.04830933 -83.59249115]
[-207.30264282 -96.74420166]
[-194.61294556 -105.22561646]
[-179.49877930 -107.35276031]
[-164.96107483 -102.70327759]
[-153.88629150 -92.20033264]
[-148.47332764 -77.92929077]
[-149.79696655 -62.72367096]
[-136.87197876 -55.11152649]
[-123.94699097 -47.49938583]
[-111.02200317 -39.88724136]
[-96.71131897 -43.85460663]
[-83.49510956 -36.31893158]
[-79.43080139 -21.28167152]
[-66.50581360 -13.66952896]
[-53.58082962 -6.05738544]
[-41.60930634 -11.00947762]
[-28.78868103 -8.08176804]
[-19.89297676 1.86720192]
[-18.36805344 15.32239437]
[-5.64503860 23.26751328]
[7.07797527 31.21263313]
[19.80098915 39.15775299]
[32.52400208 47.10287094]
[45.24701691 55.04798889]
[52.67673492 55.93271637]
[58.19343948 63.36814880]
[70.70590210 71.64089203]
[96.82742310 59.35128784]
[124.53938293 67.43926239]
[135.61679077 57.32536316]
[146.69421387 47.21146774]
[157.77162170 37.09756851]
[168.84904480 26.98367310]
[179.92645264 16.86977577]
[184.36750793 1.08342147]
[200.32403564 -2.70092225]
[211.38133240 9.40975380]
[206.16458130 24.95702362]
[190.04034424 27.94718933]
[178.96293640 38.06108856]
[167.88552856 48.17498398]
[156.80810547 58.28887939]
[145.73069763 68.40277863]
[134.65327454 78.51667023]
[138.71691895 82.27836609]
[142.35824585 86.73184204]
[145.46662903 91.82723236]
[160.46536255 91.63250732]
[174.27552795 82.78878784]
[188.71313477 90.56614685]
[188.92602539 106.96391296]
[174.69519043 115.11346436]
[160.66009521 106.63124847]
[145.66134644 106.82596588]
[141.06315613 121.10380554]
[153.12936401 130.01483154]
[165.19557190 138.92587280]
[177.26179504 147.83689880]
[189.32800293 156.74794006]
[201.39421082 165.65896606]
[213.46043396 174.56999207]
[229.79359436 179.11576843]
[229.94694519 196.06903076]
[213.69868469 200.90951538]
[204.54939270 186.63621521]
[192.48318481 177.72517395]
[180.41697693 168.81414795]
[168.35075378 159.90310669]
[156.28454590 150.99208069]
[144.21833801 142.08105469]
[132.15211487 133.17001343]
[123.48663330 137.66487122]
[114.41331482 140.06636047]
[105.40975952 140.41184998]
[104.63120270 155.39163208]
[103.85264587 170.37141418]
[103.07408905 185.35119629]
[102.29553223 200.33097839]
[101.51697540 215.31076050]
[100.73841858 230.29054260]
] def
/pairs [
[3 120]
[4 119]
[5 118]
[6 117]
[7 116]
[8 115]
[9 114]
[16 67]
[17 66]
[18 64]
[19 63]
[20 62]
[21 61]
[22 60]
[23 59]
[26 55]
[27 54]
[28 53]
[31 50]
[32 49]
[33 48]
[34 47]
[69 84]
[70 83]
[71 82]
[72 81]
[73 80]
[74 79]
[87 94]
[88 93]
[95 111]
[96 110]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
