%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:51 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUCCUUAUGCACGGGAAAUACGCAUAUCAGUGAGGAUUCGUCCGAGAUUGUGUUUUUGCUGGUUGAA\
) def
/coor [
[73.39302063 296.65460205]
[58.16880798 297.03305054]
[44.10935974 291.18054199]
[33.65056610 280.11105347]
[28.60447502 265.74246216]
[29.84535027 250.56417847]
[37.15820312 237.20596313]
[49.27603531 227.98219299]
[64.09936523 224.49093628]
[66.85560608 209.74633789]
[64.92159271 202.34315491]
[70.09471130 194.39132690]
[73.52896881 179.78976440]
[76.96322632 165.18818665]
[72.34535980 151.02751160]
[83.03669739 139.36535645]
[86.47095490 124.76379395]
[89.90522003 110.16222382]
[86.05652618 96.72052765]
[95.49320984 86.40351868]
[98.92746735 71.80194855]
[102.36173248 57.20037842]
[105.79598999 42.59880829]
[109.23024750 27.99723625]
[108.14389038 18.57319832]
[113.17504120 12.80819893]
[117.27998352 -1.61918545]
[121.38492584 -16.04656982]
[113.64628601 -24.23081970]
[110.21344757 -34.87172699]
[111.68834686 -45.87156296]
[117.71268463 -55.09387970]
[127.05158234 -60.77845764]
[137.84611511 -61.87711716]
[143.90492249 -75.59902191]
[149.96374512 -89.32093048]
[147.66235352 -105.55779266]
[160.73828125 -115.45487976]
[175.74011230 -108.83092499]
[177.23526001 -92.50007629]
[163.68565369 -83.26211548]
[157.62683105 -69.54020691]
[151.56802368 -55.81830215]
[160.12059021 -38.66497040]
[153.70838928 -20.29369354]
[135.81231689 -11.94162560]
[131.70736694 2.48575950]
[127.60242462 16.91314316]
[123.83181763 31.43149567]
[120.39756012 46.03306580]
[116.96330261 60.63463593]
[113.52904510 75.23620605]
[110.09477997 89.83777618]
[113.94347382 103.27947235]
[104.50679016 113.59648132]
[101.07253265 128.19804382]
[97.63826752 142.79962158]
[102.01049805 158.00469971]
[91.56479645 168.62245178]
[88.13053894 183.22401428]
[84.69628143 197.82559204]
[81.60020447 212.50257874]
[78.84396362 227.24717712]
[91.40512085 235.85748291]
[99.37265015 248.83586121]
[101.36614227 263.93374634]
[97.04019165 278.53530884]
] def
/pairs [
[9 63]
[10 62]
[12 61]
[13 60]
[14 59]
[16 57]
[17 56]
[18 55]
[20 53]
[21 52]
[22 51]
[23 50]
[24 49]
[26 48]
[27 47]
[28 46]
[34 43]
[35 42]
[36 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
