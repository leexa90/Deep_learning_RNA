%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:27 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGGGUGAAACGGUCUCGACAGGGGUUCGCCUUUGGACGUGGGUUCGACUCCCACCACCUCC\
) def
/coor [
[92.22914124 207.79885864]
[92.22914124 192.79885864]
[92.22914124 177.79885864]
[92.22914124 162.79885864]
[92.22914124 147.79885864]
[92.22914124 132.79885864]
[92.22914124 117.79885864]
[88.27528381 113.57701111]
[86.03796387 108.71085358]
[85.51814270 103.80806732]
[86.52099609 99.41278076]
[88.69501495 95.94739532]
[91.58707428 93.67215729]
[83.13727570 81.27857971]
[74.68746948 68.88499451]
[66.97232056 63.29414368]
[66.14349365 55.65633392]
[58.32196808 42.85696793]
[50.50044250 30.05760574]
[43.07355881 24.08913803]
[42.62648010 16.41950607]
[35.45267105 3.24618316]
[28.27886009 -9.92714024]
[13.05083466 -14.15594387]
[5.34604931 -27.95492363]
[9.73561668 -43.13738632]
[23.61528397 -50.69585037]
[38.75049210 -46.14601135]
[46.16178894 -32.18720627]
[41.45218277 -17.10095024]
[48.62599564 -3.92762661]
[55.79980469 9.24569702]
[63.29980469 22.23607826]
[71.12133026 35.03544235]
[78.94286346 47.83480453]
[87.08105469 60.43519211]
[95.53085327 72.82877350]
[103.98065186 85.22235870]
[117.32873535 92.06551361]
[132.32406616 91.69155884]
[147.31941223 91.31759644]
[162.31474304 90.94363403]
[177.31008911 90.56967163]
[186.91784668 78.23172760]
[202.21923828 75.00662994]
[215.98942566 82.41717529]
[221.72653198 96.96433258]
[216.72166443 111.77937317]
[203.33799744 119.86708832]
[187.89486694 117.40871429]
[177.68405151 105.56501007]
[162.68870544 105.93897247]
[147.69337463 106.31293488]
[132.69802856 106.68689728]
[117.70269012 107.06085205]
[107.22914124 117.79885864]
[107.22914124 132.79885864]
[107.22914124 147.79885864]
[107.22914124 162.79885864]
[107.22914124 177.79885864]
[107.22914124 192.79885864]
[107.22914124 207.79885864]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[13 38]
[14 37]
[15 36]
[17 35]
[18 34]
[19 33]
[21 32]
[22 31]
[23 30]
[39 55]
[40 54]
[41 53]
[42 52]
[43 51]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
