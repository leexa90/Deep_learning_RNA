%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (3e5c_a)
} def

/sequence { (\
UUCCCGAAAGGAUGGCGGAAACGCCAGAUGCCUUGUAACCGAAAGGGGGAAU\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 12 0.004578233 ubox
1 48 0.003528344 ubox
1 49 0.073181289 ubox
1 50 0.134361213 ubox
1 51 0.803477850 ubox
2 11 0.004626940 ubox
2 12 0.040795744 ubox
2 28 0.004621289 ubox
2 47 0.003379291 ubox
2 48 0.092925314 ubox
2 49 0.143244902 ubox
2 50 0.965258830 ubox
2 51 0.021022970 ubox
3 10 0.004768199 ubox
3 11 0.043227372 ubox
3 27 0.004932719 ubox
3 46 0.003538998 ubox
3 47 0.100878291 ubox
3 48 0.147935432 ubox
3 49 0.981055673 ubox
4 10 0.042749085 ubox
4 11 0.052149244 ubox
4 45 0.003494822 ubox
4 46 0.101026003 ubox
4 47 0.147762710 ubox
4 48 0.980895721 ubox
4 49 0.015843466 ubox
5 10 0.054784472 ubox
5 11 0.015615281 ubox
5 35 0.012193948 ubox
5 41 0.003563279 ubox
5 45 0.101230979 ubox
5 46 0.144300270 ubox
5 47 0.979213291 ubox
5 48 0.016327003 ubox
6 13 0.006992799 ubox
6 29 0.008440684 ubox
6 31 0.027701868 ubox
6 32 0.039009744 ubox
6 33 0.008785917 ubox
6 34 0.028358001 ubox
6 36 0.124984167 ubox
6 39 0.007728412 ubox
6 40 0.006623881 ubox
7 13 0.011374976 ubox
7 29 0.021744525 ubox
7 33 0.024949115 ubox
7 34 0.057747040 ubox
7 36 0.067218186 ubox
8 13 0.011374433 ubox
8 29 0.035587469 ubox
8 33 0.047746489 ubox
8 34 0.724320964 ubox
8 36 0.015143091 ubox
9 13 0.006991651 ubox
9 29 0.154645466 ubox
9 33 0.765168229 ubox
9 34 0.025461578 ubox
9 36 0.008119793 ubox
10 29 0.180313688 ubox
10 31 0.063683071 ubox
10 32 0.771054150 ubox
10 33 0.021179401 ubox
10 36 0.003201633 ubox
10 39 0.003983422 ubox
10 40 0.071333466 ubox
11 29 0.064033544 ubox
11 31 0.766500245 ubox
11 32 0.021011291 ubox
11 34 0.008160064 ubox
11 39 0.070831167 ubox
11 40 0.007468324 ubox
12 29 0.406007034 ubox
12 33 0.008736997 ubox
12 34 0.005117149 ubox
12 36 0.007968883 ubox
13 26 0.875636482 ubox
13 27 0.057136731 ubox
13 28 0.217841219 ubox
13 30 0.049775199 ubox
13 35 0.005897171 ubox
13 37 0.008204700 ubox
13 38 0.006665973 ubox
14 25 0.999512971 ubox
14 32 0.007049476 ubox
15 24 0.999949871 ubox
15 25 0.003592389 ubox
15 31 0.007064715 ubox
16 23 0.999939708 ubox
16 30 0.007061922 ubox
17 22 0.997164581 ubox
17 25 0.005398709 ubox
17 29 0.005591605 ubox
18 22 0.007099471 ubox
18 24 0.005420649 ubox
26 33 0.024442375 ubox
26 34 0.004477710 ubox
26 36 0.006920078 ubox
26 52 0.003651007 ubox
27 31 0.008070553 ubox
27 32 0.032184094 ubox
27 33 0.005876163 ubox
27 34 0.011162974 ubox
27 36 0.005849587 ubox
27 39 0.008817018 ubox
27 40 0.003229171 ubox
28 33 0.010875635 ubox
28 34 0.013606279 ubox
28 36 0.018771205 ubox
28 52 0.007408275 ubox
29 35 0.018842769 ubox
29 37 0.071300421 ubox
29 38 0.011408213 ubox
29 48 0.042422447 ubox
29 49 0.012930701 ubox
29 50 0.012147893 ubox
29 51 0.006598941 ubox
30 34 0.009235375 ubox
30 36 0.078746502 ubox
31 35 0.078726089 ubox
31 45 0.004339410 ubox
31 46 0.607436766 ubox
31 47 0.024082443 ubox
31 48 0.015165288 ubox
31 49 0.020676802 ubox
32 41 0.005281477 ubox
32 45 0.610532322 ubox
32 46 0.031108935 ubox
32 47 0.015149441 ubox
32 48 0.020741962 ubox
33 37 0.004446135 ubox
33 38 0.005221533 ubox
33 42 0.027311389 ubox
33 43 0.020137761 ubox
33 44 0.609322741 ubox
33 45 0.030874538 ubox
33 46 0.014458666 ubox
33 47 0.020494061 ubox
34 38 0.006120887 ubox
34 41 0.040686937 ubox
34 42 0.027849729 ubox
34 43 0.606665382 ubox
34 44 0.030933141 ubox
34 45 0.013504273 ubox
34 46 0.016538512 ubox
34 50 0.003349056 ubox
35 39 0.012434122 ubox
35 40 0.054501793 ubox
35 52 0.009890499 ubox
36 41 0.048631470 ubox
36 42 0.023726001 ubox
36 43 0.011161464 ubox
36 44 0.015033652 ubox
36 45 0.005895002 ubox
36 49 0.003405617 ubox
36 50 0.008596550 ubox
36 51 0.010777051 ubox
39 45 0.020386838 ubox
39 46 0.749008755 ubox
39 47 0.037723955 ubox
39 48 0.020175201 ubox
39 49 0.006809830 ubox
40 45 0.751012357 ubox
40 46 0.060737381 ubox
40 47 0.020382695 ubox
40 48 0.006822829 ubox
1 51 0.9500000 lbox
2 50 0.9500000 lbox
3 49 0.9500000 lbox
4 48 0.9500000 lbox
5 47 0.9500000 lbox
13 26 0.9500000 lbox
14 25 0.9500000 lbox
15 24 0.9500000 lbox
16 23 0.9500000 lbox
17 22 0.9500000 lbox
31 46 0.9500000 lbox
32 45 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
showpage
end
%%EOF
