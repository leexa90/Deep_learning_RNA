%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:39 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (4n0t_b)
} def

/sequence { (\
GGUCAAUUUGAAACAAUACAGAGAUGAUCAGCGGUUCCCCUGCAUAAGGAUGAACCGUUUUACAAAGAGAC\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 14 0.003761414 ubox
1 29 0.993951296 ubox
1 63 0.006433399 ubox
2 25 0.011490369 ubox
2 28 0.997129582 ubox
2 29 0.020639228 ubox
2 71 0.051099523 ubox
3 11 0.006309874 ubox
3 24 0.012158106 ubox
3 27 0.998160399 ubox
3 70 0.051957521 ubox
4 10 0.006718068 ubox
4 23 0.012248189 ubox
4 26 0.998234203 ubox
4 69 0.052088439 ubox
5 9 0.005449741 ubox
5 25 0.964515939 ubox
6 17 0.009352687 ubox
6 25 0.090935624 ubox
7 16 0.009257027 ubox
7 21 0.011001175 ubox
7 22 0.970582337 ubox
7 23 0.135304011 ubox
7 24 0.126382484 ubox
7 66 0.051180265 ubox
8 15 0.008244319 ubox
8 16 0.011941091 ubox
8 20 0.008858668 ubox
8 21 0.976739974 ubox
8 22 0.135202928 ubox
8 23 0.124459783 ubox
8 24 0.013031573 ubox
8 65 0.051356823 ubox
9 15 0.014241301 ubox
9 16 0.006339931 ubox
9 18 0.008416936 ubox
9 20 0.981216328 ubox
9 21 0.120307063 ubox
9 22 0.117058094 ubox
9 23 0.013410754 ubox
9 24 0.004638629 ubox
9 64 0.051354411 ubox
10 14 0.014673140 ubox
10 17 0.009272791 ubox
10 19 0.982675933 ubox
10 63 0.051183049 ubox
11 17 0.137209509 ubox
11 60 0.004870234 ubox
11 61 0.026212105 ubox
12 17 0.175190899 ubox
12 59 0.004919115 ubox
12 60 0.025349676 ubox
12 61 0.020252585 ubox
13 17 0.028992115 ubox
13 58 0.003982557 ubox
13 59 0.018306320 ubox
13 60 0.019236110 ubox
14 21 0.015088030 ubox
14 23 0.006631408 ubox
14 26 0.007062265 ubox
14 57 0.003826705 ubox
15 25 0.006484183 ubox
16 25 0.005034557 ubox
16 28 0.008306173 ubox
17 24 0.005516771 ubox
17 27 0.008828156 ubox
19 26 0.023534647 ubox
20 25 0.022806301 ubox
21 29 0.034302934 ubox
22 28 0.034002247 ubox
23 29 0.013094092 ubox
23 63 0.003251890 ubox
24 28 0.011407003 ubox
25 62 0.010955508 ubox
25 64 0.008402574 ubox
26 61 0.011487897 ubox
26 63 0.009948321 ubox
27 60 0.011046734 ubox
27 61 0.004127557 ubox
28 68 0.003655864 ubox
29 67 0.005337608 ubox
29 69 0.004277357 ubox
30 58 0.018474730 ubox
30 59 0.812549920 ubox
30 60 0.052640513 ubox
30 61 0.028946075 ubox
31 58 0.984171952 ubox
31 59 0.044608117 ubox
31 60 0.010020048 ubox
31 61 0.004492200 ubox
31 63 0.007884889 ubox
32 57 0.998451494 ubox
33 56 0.999974429 ubox
34 55 0.999988466 ubox
35 53 0.013554394 ubox
35 54 0.999401211 ubox
36 50 0.007321558 ubox
36 52 0.018893644 ubox
36 53 0.999021379 ubox
37 49 0.007935068 ubox
37 52 0.996874574 ubox
38 48 0.008164025 ubox
38 49 0.104347110 ubox
38 52 0.030503702 ubox
39 48 0.100374374 ubox
39 49 0.982269730 ubox
40 48 0.984138127 ubox
40 49 0.141793240 ubox
41 46 0.026179022 ubox
41 47 0.980068566 ubox
41 48 0.139417016 ubox
41 49 0.003228509 ubox
41 50 0.024886575 ubox
43 48 0.026308952 ubox
43 49 0.006327470 ubox
57 63 0.005388234 ubox
57 71 0.044766843 ubox
58 62 0.005040589 ubox
58 65 0.005340420 ubox
58 66 0.008390784 ubox
58 67 0.009610656 ubox
58 68 0.019230352 ubox
58 69 0.026972147 ubox
58 70 0.055502953 ubox
59 64 0.010639060 ubox
59 65 0.019180416 ubox
59 66 0.026556180 ubox
59 67 0.034969819 ubox
59 68 0.077272171 ubox
59 69 0.080896646 ubox
59 70 0.064205801 ubox
60 64 0.020122727 ubox
60 65 0.029508892 ubox
60 66 0.045500051 ubox
60 67 0.087921381 ubox
60 68 0.102419907 ubox
60 69 0.081138843 ubox
60 70 0.040681312 ubox
61 65 0.039898569 ubox
61 66 0.080156009 ubox
61 67 0.102478763 ubox
61 68 0.079574107 ubox
61 69 0.043426054 ubox
61 70 0.023563485 ubox
63 67 0.036850625 ubox
63 69 0.080071621 ubox
67 71 0.014419869 ubox
1 29 0.9500000 lbox
2 28 0.9500000 lbox
3 27 0.9500000 lbox
4 26 0.9500000 lbox
5 25 0.9500000 lbox
7 22 0.9500000 lbox
8 21 0.9500000 lbox
9 20 0.9500000 lbox
10 19 0.9500000 lbox
30 59 0.9500000 lbox
31 58 0.9500000 lbox
32 57 0.9500000 lbox
33 56 0.9500000 lbox
34 55 0.9500000 lbox
35 54 0.9500000 lbox
36 53 0.9500000 lbox
37 52 0.9500000 lbox
39 49 0.9500000 lbox
40 48 0.9500000 lbox
41 47 0.9500000 lbox
showpage
end
%%EOF
