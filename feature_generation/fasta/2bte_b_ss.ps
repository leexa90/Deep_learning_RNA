%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:27 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCCGGGGUGGCGGAAUGGGUAGACGCGCAUGACUCAGGAUCAUGUGCGCAAGCGUGCGGGUUCAAGUCCCGCCCCCGGCACCA\
) def
/coor [
[115.81187439 243.17430115]
[113.57624054 228.34184265]
[111.34060669 213.50938416]
[109.10497284 198.67691040]
[106.86933899 183.84445190]
[104.63370514 169.01199341]
[102.39807129 154.17953491]
[89.00759888 147.41970825]
[75.74587250 154.42872620]
[67.16032410 167.71778870]
[52.29254913 166.82417297]
[47.87423706 181.99830627]
[33.98027802 189.53047180]
[18.85371399 184.95196533]
[11.46886635 170.97915649]
[16.20703316 155.90184021]
[30.25714302 148.66513062]
[45.28351974 153.56243896]
[52.92049789 140.77471924]
[68.73683929 141.16700745]
[81.99857330 134.15797424]
[67.38998413 115.05749512]
[67.57941437 92.72889709]
[80.40068054 76.58733368]
[73.89242554 63.07280350]
[67.38417053 49.55826950]
[60.87591553 36.04373550]
[54.36766052 22.52920341]
[47.85940170 9.01467037]
[41.35114670 -4.49986219]
[34.84289169 -18.01439476]
[28.33463478 -31.52892876]
[21.57481003 -44.91940308]
[7.40894079 -53.18137360]
[7.75165081 -69.57694244]
[22.25038910 -77.23974609]
[35.99009705 -68.28695679]
[34.83654022 -51.92843246]
[40.89391708 -47.37557602]
[41.84916687 -38.03718567]
[48.35742188 -24.52265167]
[54.86568069 -11.00811863]
[61.37393570 2.50641465]
[67.88219452 16.02094841]
[74.39044952 29.53548050]
[80.89870453 43.05001450]
[87.40695953 56.56454849]
[93.91521454 70.07907867]
[103.56006622 68.65846252]
[113.47660828 70.36782074]
[122.64483643 75.22795868]
[130.06240845 82.92687988]
[134.85298157 92.83444977]
[136.36663818 104.05198669]
[134.26107788 115.49334717]
[128.55407715 125.99005890]
[143.51213074 127.11100769]
[158.47019958 128.23196411]
[173.42825317 129.35292053]
[188.38630676 130.47386169]
[199.17478943 119.15385437]
[214.72126770 117.46830750]
[227.68516541 126.21309662]
[231.94532776 141.25920105]
[225.49024963 155.50228882]
[211.36779785 162.21723938]
[196.24618530 158.23344421]
[187.26535034 145.43191528]
[172.30729675 144.31097412]
[157.34924316 143.19001770]
[142.39118958 142.06906128]
[127.43312836 140.94812012]
[117.23053741 151.94389343]
[119.46617126 166.77635193]
[121.70180511 181.60882568]
[123.93743896 196.44128418]
[126.17307281 211.27374268]
[128.40870667 226.10620117]
[130.64433289 240.93867493]
[142.64675903 251.58392334]
[141.66349792 267.59683228]
[128.44882202 276.69363403]
[113.13990021 271.89605713]
] def
/pairs [
[1 79]
[2 78]
[3 77]
[4 76]
[5 75]
[6 74]
[7 73]
[8 21]
[9 20]
[11 18]
[24 48]
[25 47]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[31 41]
[32 40]
[33 38]
[56 72]
[57 71]
[58 70]
[59 69]
[60 68]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
