%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (2om7_i)
} def

/sequence { (\
GCCAGGAGGUUGGCUUAGAAGCAGCCAUCCUUUAAAGAGUGCGUAAUAGCUCACUGGU\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 33 0.003639011 ubox
1 58 0.893955929 ubox
2 37 0.011069356 ubox
2 56 0.003669907 ubox
2 57 0.992313858 ubox
3 37 0.015177869 ubox
3 56 0.993128623 ubox
3 57 0.004040853 ubox
4 31 0.103913492 ubox
4 32 0.005523278 ubox
4 33 0.008742818 ubox
4 55 0.981740636 ubox
5 29 0.004910532 ubox
5 30 0.118487259 ubox
5 31 0.003612474 ubox
5 32 0.008238350 ubox
5 33 0.191594771 ubox
5 54 0.968207792 ubox
5 55 0.006211217 ubox
6 28 0.008088582 ubox
6 29 0.123838354 ubox
6 30 0.008387241 ubox
6 31 0.015125813 ubox
6 32 0.926972086 ubox
6 33 0.093253600 ubox
6 52 0.047769093 ubox
6 54 0.011858492 ubox
7 28 0.123402049 ubox
7 31 0.981369942 ubox
7 32 0.075373074 ubox
7 33 0.005847479 ubox
7 51 0.036065288 ubox
8 26 0.127867370 ubox
8 29 0.014142569 ubox
8 30 0.990230162 ubox
8 31 0.047026593 ubox
8 50 0.012959983 ubox
8 51 0.007986626 ubox
9 25 0.128089746 ubox
9 28 0.014468046 ubox
9 29 0.987658519 ubox
9 30 0.046611203 ubox
9 50 0.008172907 ubox
10 24 0.127915454 ubox
10 27 0.025402771 ubox
10 48 0.008157744 ubox
10 49 0.008293199 ubox
11 23 0.121200645 ubox
11 24 0.003394103 ubox
11 27 0.972687411 ubox
11 48 0.006995109 ubox
12 22 0.092613172 ubox
12 26 0.991672022 ubox
12 47 0.005970069 ubox
13 22 0.089039494 ubox
13 25 0.991676680 ubox
13 40 0.003254857 ubox
13 50 0.003604921 ubox
14 21 0.118770011 ubox
14 24 0.991444617 ubox
14 39 0.003307282 ubox
14 49 0.003686340 ubox
15 19 0.011755552 ubox
15 20 0.110594200 ubox
15 21 0.024726059 ubox
15 23 0.953869951 ubox
15 24 0.013197130 ubox
15 38 0.003318418 ubox
15 48 0.003589226 ubox
16 20 0.048567570 ubox
16 21 0.233229372 ubox
16 23 0.083051903 ubox
16 37 0.003258478 ubox
18 22 0.103762772 ubox
18 33 0.003807036 ubox
19 32 0.003892211 ubox
20 31 0.003915907 ubox
21 30 0.003922835 ubox
21 42 0.005609232 ubox
22 41 0.005612074 ubox
23 40 0.005472107 ubox
24 42 0.003263579 ubox
24 44 0.003852156 ubox
25 43 0.003944766 ubox
26 37 0.004611453 ubox
26 41 0.004475286 ubox
27 40 0.005284146 ubox
28 38 0.005350413 ubox
28 39 0.005031512 ubox
29 37 0.005563192 ubox
30 37 0.010827449 ubox
30 39 0.014475463 ubox
31 35 0.003677216 ubox
31 36 0.011369260 ubox
31 38 0.015500432 ubox
31 39 0.004466088 ubox
32 36 0.009559706 ubox
32 37 0.015156440 ubox
32 38 0.009101550 ubox
32 39 0.004420009 ubox
32 53 0.004214413 ubox
32 57 0.008893363 ubox
33 37 0.010641775 ubox
33 38 0.012479606 ubox
33 39 0.004836182 ubox
33 53 0.016377732 ubox
33 56 0.012994261 ubox
34 40 0.005184133 ubox
34 55 0.014952722 ubox
34 58 0.003373286 ubox
35 40 0.006639773 ubox
35 55 0.004381641 ubox
35 58 0.009116695 ubox
36 40 0.004083111 ubox
36 51 0.006758355 ubox
36 55 0.027439237 ubox
36 58 0.005594094 ubox
37 42 0.005994028 ubox
37 50 0.006747421 ubox
37 51 0.003814129 ubox
37 52 0.953700908 ubox
37 54 0.030070701 ubox
37 55 0.004193589 ubox
38 51 0.954395916 ubox
38 55 0.155988421 ubox
39 47 0.009412973 ubox
39 50 0.951006458 ubox
39 51 0.016894359 ubox
39 52 0.189006939 ubox
39 54 0.170376597 ubox
40 46 0.012845157 ubox
40 48 0.036924036 ubox
40 49 0.947024443 ubox
40 53 0.172833533 ubox
41 47 0.037674975 ubox
41 50 0.254275171 ubox
41 52 0.172225481 ubox
42 49 0.258571188 ubox
43 47 0.040277939 ubox
43 50 0.172461673 ubox
43 52 0.006064842 ubox
44 48 0.013336393 ubox
44 49 0.167283329 ubox
1 58 0.9500000 lbox
2 57 0.9500000 lbox
3 56 0.9500000 lbox
4 55 0.9500000 lbox
5 54 0.9500000 lbox
6 32 0.9500000 lbox
7 31 0.9500000 lbox
8 30 0.9500000 lbox
9 29 0.9500000 lbox
11 27 0.9500000 lbox
12 26 0.9500000 lbox
13 25 0.9500000 lbox
14 24 0.9500000 lbox
15 23 0.9500000 lbox
37 52 0.9500000 lbox
38 51 0.9500000 lbox
39 50 0.9500000 lbox
40 49 0.9500000 lbox
showpage
end
%%EOF
