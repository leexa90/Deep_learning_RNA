%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:26 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCUACCUAUCGGGCUAAGGAGCCGUAUGCGAUGAAAGUCGCACGUACGGUUCUAUGCCCGGGGGAAAAC\
) def
/coor [
[82.96185303 290.59600830]
[74.72044373 277.63549805]
[74.07946777 262.28997803]
[81.21134186 248.68734741]
[94.19761658 240.48660278]
[93.52465057 225.50170898]
[92.85167694 210.51681519]
[89.28845978 203.75805664]
[92.50000000 194.84762573]
[92.50000000 179.84762573]
[92.50000000 164.84762573]
[92.50000000 149.84762573]
[92.50000000 134.84762573]
[92.50000000 119.84761810]
[82.41140747 111.86672974]
[78.78794098 99.52392578]
[82.96150970 87.35610962]
[93.39801025 79.83587646]
[94.07098389 64.85098267]
[94.74395752 49.86608887]
[95.41693115 34.88119125]
[96.08990479 19.89629555]
[96.76287079 4.91139984]
[97.43584442 -10.07349586]
[98.10881805 -25.05839157]
[98.78179169 -40.04328918]
[98.78179169 -55.04328918]
[98.10881805 -70.02818298]
[97.43584442 -85.01307678]
[96.76287079 -99.99797821]
[96.08990479 -114.98287201]
[95.41693115 -129.96777344]
[86.13726044 -143.48886108]
[93.45021057 -158.16716003]
[109.83284760 -158.90290833]
[118.43211365 -144.93922424]
[110.40182495 -130.64074707]
[111.07479858 -115.65584564]
[111.74777222 -100.67095184]
[112.42074585 -85.68605042]
[113.09371185 -70.70115662]
[113.76668549 -55.71625900]
[116.87787628 -51.69997025]
[117.26448059 -45.60800552]
[113.76668549 -39.37031555]
[113.09371185 -24.38541985]
[112.42074585 -9.40052414]
[111.74777222 5.58437204]
[111.07479858 20.56926727]
[110.40182495 35.55416489]
[109.72885132 50.53905869]
[109.05587769 65.52395630]
[108.38291168 80.50885010]
[119.75653839 92.26325226]
[119.38953400 108.61533356]
[107.50000000 119.84761810]
[107.50000000 134.84762573]
[107.50000000 149.84762573]
[107.50000000 164.84762573]
[107.50000000 179.84762573]
[107.50000000 194.84762573]
[107.83657074 209.84384155]
[108.50954437 224.82873535]
[109.18251801 239.81362915]
[122.85162354 246.81727600]
[131.17411804 259.72586060]
[131.91128540 275.06704712]
[124.86483002 288.71414185]
[111.93021393 296.99612427]
] def
/pairs [
[5 64]
[6 63]
[7 62]
[9 61]
[10 60]
[11 59]
[12 58]
[13 57]
[14 56]
[18 53]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[24 47]
[25 46]
[26 45]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
