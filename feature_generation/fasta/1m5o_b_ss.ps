%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:26 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGAGAGAAGUCAACCAGAGAAACACACCAACCCAUUGCACUCCGGGUUGGUGGUAUAUUACCUGGUACGGGGGAAACUUCGUGGUGGCCG\
) def
/coor [
[80.65772247 220.69641113]
[68.59706879 230.05073547]
[53.67030716 233.23736572]
[38.84116745 229.62361145]
[27.05397606 219.92695618]
[20.64909554 206.07270813]
[20.89821625 190.81163025]
[27.75187492 177.17381287]
[39.84927368 167.86705017]
[54.78846741 164.73922729]
[58.33993149 150.16571045]
[61.89139938 135.59220886]
[65.44286346 121.01870728]
[89.35839081 92.67982483]
[83.85557556 78.72564697]
[78.35276794 64.77146912]
[72.84995270 50.81729126]
[67.34713745 36.86311340]
[53.12793732 30.50292206]
[47.74608231 16.27301216]
[53.89718246 2.75637221]
[48.39437103 -11.19780445]
[42.18432999 -24.85194016]
[35.28335571 -38.17021942]
[28.41285133 -44.51276398]
[28.38292694 -52.06309891]
[21.94067574 -65.60922241]
[15.49842358 -79.15534210]
[9.05617237 -92.70146179]
[2.61392045 -106.24758148]
[-3.82833123 -119.79370117]
[-10.27058315 -133.33982849]
[-16.71283531 -146.88594055]
[-23.15508652 -160.43206787]
[-38.47142792 -161.57453918]
[-51.15549088 -170.23538208]
[-57.79532623 -184.08486938]
[-56.60484695 -199.39755249]
[-47.90429306 -212.05439758]
[-34.03406525 -218.65078735]
[-18.72518730 -217.41232300]
[-6.09566832 -208.67213440]
[0.45721278 -194.78129578]
[-0.82923549 -179.47637939]
[-9.60896492 -166.87431335]
[-3.16671348 -153.32820129]
[3.27553821 -139.78207397]
[9.71778965 -126.23595428]
[16.16004181 -112.68983459]
[22.60229301 -99.14371490]
[29.04454422 -85.59759521]
[35.48679733 -72.05147552]
[41.92904663 -58.50535202]
[48.60163498 -45.07119370]
[55.50260925 -31.75291634]
[58.95745087 -30.35306931]
[61.83504105 -27.08826065]
[63.20766830 -22.28549576]
[62.34854889 -16.70061684]
[67.85136414 -2.74644113]
[81.57263184 2.93355250]
[87.35205078 17.00668144]
[81.30131531 31.36030197]
[86.80413055 45.31447601]
[92.30693817 59.26865387]
[97.80975342 73.22283173]
[103.31256866 87.17700958]
[113.55086517 98.13954926]
[127.09698486 104.58180237]
[140.64311218 111.02404785]
[154.18922424 117.46630096]
[167.73535156 123.90855408]
[181.28146362 130.35079956]
[197.57661438 128.50688171]
[207.10212708 141.85591125]
[200.05895996 156.66557312]
[183.69253540 157.70094299]
[174.83921814 143.89692688]
[161.29309082 137.45468140]
[147.74697876 131.01242065]
[134.20085144 124.57017517]
[120.65473175 118.12792206]
[107.10861206 111.68566895]
[100.33555603 114.90679169]
[86.78942871 121.34904480]
[80.01637268 124.57017517]
[76.46490479 139.14367676]
[72.91343689 153.71717834]
[69.36196899 168.29069519]
[81.18725586 177.94084167]
[87.64664459 191.76976013]
] def
/pairs [
[10 89]
[11 88]
[12 87]
[13 86]
[14 67]
[15 66]
[16 65]
[17 64]
[18 63]
[21 60]
[22 59]
[23 55]
[24 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[68 83]
[69 82]
[70 81]
[71 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
