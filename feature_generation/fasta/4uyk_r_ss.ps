%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:41 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGGCUAGGCCGGGGGGUUCGGCGUCCCCUGUAACCGGAAACCGCCGAUAUGCCGGGGCCGAAGCCCGAGGGGCGGUUCCCGAAGCCGCCUCUGUAAGGAGGCGGUGGAGGGUUCCCACCCUCGGGCGUGCCU\
) def
/coor [
[88.11501312 193.45704651]
[90.75670624 174.25624084]
[91.10833740 159.26036072]
[91.45997620 144.26448059]
[91.81161499 129.26860046]
[82.09053802 124.55507660]
[74.63245392 116.73882294]
[70.37976074 106.80749512]
[55.38388443 106.45585632]
[40.38800430 106.10421753]
[25.39212799 105.75257874]
[9.50038147 114.96880341]
[-5.14508009 105.37313080]
[-20.14508057 105.37313080]
[-33.94525146 113.11042786]
[-46.67252350 105.37313080]
[-57.80564880 116.26768494]
[-73.01778412 116.05400085]
[-83.33546448 105.37313080]
[-98.33546448 105.37313080]
[-113.33546448 105.37313080]
[-128.33546448 105.37313080]
[-143.33546448 105.37313080]
[-158.33546448 105.37313080]
[-173.32618713 105.90052795]
[-188.28910828 106.95466614]
[-203.25201416 108.00881195]
[-210.56962585 121.59027100]
[-224.07933044 129.03952026]
[-239.47024536 127.97953796]
[-251.83116150 118.74854279]
[-257.21777344 104.29212952]
[-253.91122437 89.22328186]
[-242.96662903 78.35040283]
[-227.87635803 75.14300537]
[-213.45567322 80.62454987]
[-204.30615234 93.04589844]
[-189.34324646 91.99175262]
[-174.38032532 90.93761444]
[-171.76855469 88.43876648]
[-167.78091431 87.12946320]
[-163.01324463 87.65859222]
[-158.33546448 90.37313080]
[-143.33546448 90.37313080]
[-128.33546448 90.37313080]
[-113.33546448 90.37313080]
[-98.33546448 90.37313080]
[-83.33546448 90.37313080]
[-73.01778412 79.69225311]
[-57.80564880 79.47857666]
[-46.67252350 90.37313080]
[-33.94525146 82.63582611]
[-20.14508057 90.37313080]
[-5.14508009 90.37313080]
[3.68109989 82.01586151]
[16.23804092 81.94862366]
[25.74376678 90.75670624]
[40.73964310 91.10833740]
[55.73552322 91.45997620]
[70.73139954 91.81161499]
[80.37994385 76.78892517]
[96.79950714 69.77654266]
[114.32357788 73.19448853]
[126.90448761 85.86320496]
[141.49412537 82.37862396]
[156.08377075 78.89404297]
[170.67341614 75.40946198]
[185.26306152 71.92488098]
[199.85270691 68.44029999]
[214.44235229 64.95571899]
[229.03199768 61.47113800]
[243.62164307 57.98655701]
[251.91932678 44.80376434]
[266.76495361 41.47774124]
[279.28158569 49.46956253]
[293.87121582 45.98498154]
[302.16891479 32.80218506]
[317.01452637 29.47616196]
[329.53118896 37.46798325]
[344.12081909 33.98340225]
[358.71044922 30.49882317]
[364.74346924 16.32458305]
[377.81314087 8.51194763]
[392.79980469 9.87712097]
[403.97509766 19.68784523]
[418.56475830 16.20326614]
[433.15438843 12.71868515]
[447.74404907 9.23410511]
[462.33367920 5.74952459]
[476.92333984 2.26494408]
[491.51296997 -1.21963620]
[506.10263062 -4.70421648]
[520.69226074 -8.18879700]
[532.22253418 -19.85005951]
[548.01586914 -15.43400478]
[551.82550049 0.51650977]
[539.73236084 11.59296131]
[524.17681885 6.40084648]
[509.58718872 9.88542652]
[494.99755859 13.37000751]
[480.40789795 16.85458755]
[465.81826782 20.33916855]
[451.22863770 23.82374763]
[436.63897705 27.30832863]
[422.04934692 30.79290962]
[407.45968628 34.27748871]
[401.92401123 48.07945633]
[389.17181396 56.06976700]
[373.98223877 55.00654602]
[362.19503784 45.08846664]
[347.60540771 48.57304764]
[333.01574707 52.05762863]
[325.46154785 64.84315491]
[310.71524048 68.58484650]
[297.35580444 60.57462311]
[282.76617432 64.05920410]
[275.21197510 76.84473419]
[260.46563721 80.58642578]
[247.10621643 72.57620239]
[232.51657104 76.06078339]
[217.92692566 79.54536438]
[203.33728027 83.02994537]
[188.74765015 86.51452637]
[174.15800476 89.99910736]
[159.56835938 93.48368073]
[144.97871399 96.96826172]
[130.38906860 100.45284271]
[127.25704193 113.44448090]
[118.85502625 123.83670807]
[106.80749512 129.62023926]
[106.45585632 144.61611938]
[106.10421753 159.61199951]
[105.75257874 174.60787964]
] def
/pairs [
[2 133]
[3 132]
[4 131]
[5 130]
[8 60]
[9 59]
[10 58]
[11 57]
[13 54]
[14 53]
[16 51]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 39]
[26 38]
[27 37]
[64 127]
[65 126]
[66 125]
[67 124]
[68 123]
[69 122]
[70 121]
[71 120]
[72 119]
[75 116]
[76 115]
[79 112]
[80 111]
[81 110]
[85 106]
[86 105]
[87 104]
[88 103]
[89 102]
[90 101]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
