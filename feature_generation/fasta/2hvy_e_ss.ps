%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:27 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGGUCCGCCUUGAGUGCCCGGGUGAGAAGCAUGAUCCCGGGUAAUUAUGGCGGACCCACAG\
) def
/coor [
[130.64479065 286.37734985]
[127.62530518 271.68438721]
[124.60582733 256.99145508]
[121.58634949 242.29850769]
[118.56687164 227.60554504]
[115.54739380 212.91259766]
[112.52791595 198.21965027]
[109.50843811 183.52670288]
[106.48896027 168.83375549]
[96.34806061 157.92451477]
[101.14902496 142.84933472]
[98.12954712 128.15638733]
[95.11006927 113.46343231]
[85.96926880 102.88339233]
[90.19697571 89.55604553]
[87.17749786 74.86309814]
[84.15802002 60.17014694]
[81.13854218 45.47719955]
[78.11906433 30.78425026]
[75.09958649 16.09130096]
[72.08010864 1.39835119]
[69.06063080 -13.29459763]
[65.66991425 -27.90633965]
[54.72056198 -39.32659912]
[59.02074051 -53.58695221]
[45.27561569 -61.38740540]
[41.15269470 -76.64443970]
[49.09803391 -90.30632782]
[64.39780426 -94.26770782]
[77.97492218 -86.17837524]
[81.77433014 -70.83757782]
[73.54190063 -57.34674072]
[84.22232819 -46.96513367]
[80.19107056 -31.66612816]
[85.10829926 -25.75438499]
[83.75358582 -16.31407547]
[86.77306366 -1.62112665]
[89.79254150 13.07182217]
[92.81201935 27.76477242]
[95.83149719 42.45772171]
[98.85097504 57.15066910]
[101.87045288 71.84362030]
[104.88993073 86.53656769]
[114.03073120 97.11660767]
[109.80302429 110.44395447]
[112.82250214 125.13690186]
[115.84197998 139.82984924]
[126.19884491 151.79002380]
[121.18191528 165.81428528]
[124.20139313 180.50723267]
[127.22087097 195.20018005]
[130.24034119 209.89312744]
[133.25982666 224.58607483]
[136.27929688 239.27902222]
[139.29878235 253.97196960]
[142.31825256 268.66491699]
[145.33773804 283.35787964]
[157.88807678 293.35128784]
[157.75581360 309.39379883]
[145.04241943 319.17895508]
[129.50051880 315.20040894]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[11 47]
[12 46]
[13 45]
[15 43]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[21 37]
[22 36]
[23 34]
[25 32]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
