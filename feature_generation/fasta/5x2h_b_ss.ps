%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:07:13 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGAAAUUAGGUGCGCUUGGCGUUUUAGUCCCUGAAAAGGGACUAAAAUAAAGAGUUUGCGGGACUCUGCGGGGUUACAAUCCCCUAAAACCGC\
) def
/coor [
[80.86841583 221.10183716]
[67.62873840 228.78099060]
[52.33641434 229.41618347]
[38.50551224 222.86143494]
[29.31426620 210.62298584]
[26.87476158 195.51315308]
[31.74757767 181.00404358]
[42.81297302 170.42974854]
[57.52820969 166.22018433]
[60.51599884 151.52075195]
[63.50378799 136.82133484]
[51.42773819 127.92362976]
[38.27348709 135.13235474]
[32.41488266 150.06742859]
[17.04351807 154.66098022]
[3.95099044 145.38923645]
[3.18076587 129.36468506]
[15.32369518 118.87998199]
[31.06476212 121.97811127]
[44.21900940 114.76938629]
[45.96962357 99.87188721]
[34.84484482 89.81011963]
[23.72006226 79.74834442]
[12.59527969 69.68657684]
[1.47049856 59.62480545]
[-9.65428257 49.56303406]
[-20.77906418 39.50126266]
[-31.90384674 29.43949127]
[-43.02862930 19.37771988]
[-54.15340805 9.31594944]
[-65.27819061 -0.74582142]
[-76.40296936 -10.80759239]
[-92.54106903 -13.72201347]
[-97.83075714 -29.24461746]
[-86.83045959 -41.40707779]
[-70.85633850 -37.69770050]
[-66.34120178 -21.93237305]
[-55.21641922 -11.87060261]
[-44.09163666 -1.80883205]
[-32.96685791 8.25293922]
[-21.84207535 18.31471062]
[-10.71729374 28.37648010]
[0.40748790 38.43825150]
[11.53226948 48.50002289]
[22.65705109 58.56179428]
[33.78183365 68.62356567]
[44.90661240 78.68533325]
[56.03139496 88.74710846]
[73.36072540 67.26226044]
[98.21101379 61.01324463]
[119.98476410 70.23852539]
[130.76712036 59.81063843]
[141.54946899 49.38275146]
[152.33183289 38.95486450]
[163.11418152 28.52697754]
[173.89653015 18.09909058]
[184.67889404 7.67120504]
[191.86106873 -7.68629217]
[208.60661316 -5.03617859]
[210.69569397 11.78856754]
[195.10678101 18.45355988]
[184.32441711 28.88144684]
[173.54206848 39.30933380]
[162.75971985 49.73722076]
[151.97735596 60.16510773]
[141.19500732 70.59299469]
[130.41264343 81.02088165]
[134.27532959 89.49583435]
[135.82447815 98.67980194]
[134.95550537 107.95288849]
[148.56187439 114.26690674]
[162.16824341 120.58092499]
[175.77459717 126.89495087]
[189.85705566 120.09652710]
[205.00198364 123.99074554]
[214.05844116 136.73887634]
[212.75021362 152.32164001]
[201.69502258 163.38133240]
[186.11279297 164.69590759]
[173.36097717 155.64465332]
[169.46058655 140.50131226]
[155.85421753 134.18728638]
[142.24784851 127.87326813]
[128.64149475 121.55924988]
[122.55545044 130.27839661]
[113.78490448 137.19107056]
[102.89318085 141.47016907]
[90.69651794 142.47131348]
[78.20321655 139.80911255]
[75.21542358 154.50854492]
[72.22763062 169.20796204]
[84.13184357 178.82818604]
[90.19110870 192.88320923]
] def
/pairs [
[9 91]
[10 90]
[11 89]
[12 20]
[13 19]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[70 84]
[71 83]
[72 82]
[73 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
