%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:38 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (3w1k_f)
} def

/sequence { (\
GGGAGUAGAUAGGCGCUGGUGUGCCUCCUAGACUUCAAAUCUACGGUCUCGCUAUUUAAGCGAGAGGUGGGUUCGAUUCCCACAUACUCCCG\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 81 0.003550897 ubox
1 91 0.999219262 ubox
2 80 0.003553587 ubox
2 90 0.999972552 ubox
2 91 0.004170642 ubox
3 79 0.003552628 ubox
3 89 0.999979019 ubox
4 78 0.003477499 ubox
4 88 0.999791779 ubox
5 44 0.029311061 ubox
5 87 0.999453515 ubox
6 30 0.022025736 ubox
6 43 0.032879031 ubox
6 84 0.004085287 ubox
6 86 0.993184887 ubox
7 29 0.035847733 ubox
7 34 0.003277134 ubox
7 42 0.038412055 ubox
7 85 0.935844995 ubox
8 26 0.009722188 ubox
8 27 0.061445071 ubox
8 28 0.054836184 ubox
8 29 0.020215097 ubox
8 33 0.005061883 ubox
8 36 0.008359742 ubox
8 41 0.042605721 ubox
8 44 0.003309505 ubox
8 78 0.003378592 ubox
8 79 0.010474900 ubox
8 80 0.007261222 ubox
8 81 0.010284057 ubox
8 83 0.049091271 ubox
8 85 0.023003100 ubox
9 26 0.048922548 ubox
9 29 0.011177157 ubox
9 35 0.008195516 ubox
9 40 0.042584079 ubox
9 77 0.003464074 ubox
9 78 0.009797115 ubox
9 85 0.040305490 ubox
10 30 0.008875039 ubox
10 39 0.041949436 ubox
10 66 0.003650969 ubox
10 82 0.029908843 ubox
10 84 0.059597777 ubox
11 26 0.920270655 ubox
11 29 0.007302145 ubox
11 85 0.003746213 ubox
12 25 0.999574720 ubox
12 26 0.005411348 ubox
12 28 0.005655987 ubox
13 24 0.999962538 ubox
13 25 0.004484412 ubox
13 27 0.004956486 ubox
14 23 0.999949067 ubox
15 22 0.999186751 ubox
15 24 0.005123955 ubox
16 21 0.999117641 ubox
16 23 0.005277088 ubox
25 46 0.003312751 ubox
26 32 0.008929830 ubox
26 45 0.004885962 ubox
26 46 0.090457206 ubox
27 31 0.013069500 ubox
27 45 0.206444322 ubox
27 46 0.937744490 ubox
27 66 0.004190340 ubox
28 45 0.946003559 ubox
28 46 0.041088893 ubox
28 66 0.005246816 ubox
29 37 0.003760356 ubox
29 38 0.005951149 ubox
29 43 0.977064050 ubox
29 45 0.032670831 ubox
29 65 0.003225866 ubox
29 82 0.006073972 ubox
30 35 0.003230702 ubox
30 42 0.986897129 ubox
30 49 0.011285134 ubox
31 36 0.023391943 ubox
31 40 0.003330432 ubox
31 41 0.987709272 ubox
31 42 0.007700336 ubox
31 44 0.007683547 ubox
31 48 0.018910931 ubox
31 77 0.003240116 ubox
31 78 0.008425324 ubox
31 79 0.068900484 ubox
31 80 0.020424742 ubox
31 81 0.016874409 ubox
31 83 0.004493388 ubox
32 40 0.942822764 ubox
32 42 0.004755541 ubox
32 47 0.023159909 ubox
32 77 0.008598921 ubox
32 78 0.068422050 ubox
33 45 0.009434172 ubox
33 46 0.026596393 ubox
34 38 0.197317891 ubox
34 39 0.153569832 ubox
34 43 0.006206986 ubox
34 45 0.025189882 ubox
34 76 0.013362994 ubox
35 39 0.043339644 ubox
35 43 0.003527108 ubox
35 46 0.022653424 ubox
35 75 0.010449459 ubox
35 76 0.095633160 ubox
36 45 0.030975975 ubox
36 46 0.004860129 ubox
36 75 0.098920892 ubox
37 42 0.008158234 ubox
37 73 0.005281580 ubox
38 72 0.003873806 ubox
38 73 0.099094387 ubox
39 47 0.009650985 ubox
39 72 0.103220465 ubox
40 46 0.012265162 ubox
40 71 0.103436134 ubox
41 45 0.013742236 ubox
41 46 0.030105294 ubox
41 66 0.006631165 ubox
41 70 0.103573041 ubox
42 65 0.004106611 ubox
42 69 0.103530802 ubox
43 68 0.103617995 ubox
44 66 0.040499278 ubox
44 67 0.103670692 ubox
47 65 0.934880284 ubox
47 66 0.020507112 ubox
48 64 0.999318874 ubox
48 66 0.007899446 ubox
49 63 0.999708968 ubox
49 65 0.006423134 ubox
50 62 0.999952494 ubox
50 64 0.005378560 ubox
51 61 0.999979108 ubox
52 60 0.999921140 ubox
53 58 0.041293469 ubox
53 59 0.976918606 ubox
53 60 0.005020005 ubox
55 59 0.006956248 ubox
65 85 0.024286881 ubox
66 81 0.009435337 ubox
66 83 0.051701677 ubox
66 85 0.041599019 ubox
67 80 0.009390380 ubox
67 81 0.006888675 ubox
67 83 0.990383912 ubox
67 85 0.004470314 ubox
68 82 0.993454522 ubox
68 84 0.004975475 ubox
69 79 0.009164543 ubox
69 80 0.016649306 ubox
69 81 0.994400590 ubox
69 83 0.004979076 ubox
70 78 0.009083379 ubox
70 79 0.020230413 ubox
70 80 0.994335703 ubox
70 81 0.006202255 ubox
71 77 0.009996192 ubox
71 78 0.021496610 ubox
71 79 0.993228546 ubox
71 80 0.006841511 ubox
72 76 0.022329219 ubox
75 80 0.004425819 ubox
75 81 0.005580562 ubox
1 91 0.9500000 lbox
2 90 0.9500000 lbox
3 89 0.9500000 lbox
4 88 0.9500000 lbox
5 87 0.9500000 lbox
6 86 0.9500000 lbox
7 85 0.9500000 lbox
11 26 0.9500000 lbox
12 25 0.9500000 lbox
13 24 0.9500000 lbox
14 23 0.9500000 lbox
15 22 0.9500000 lbox
16 21 0.9500000 lbox
27 46 0.9500000 lbox
28 45 0.9500000 lbox
29 43 0.9500000 lbox
30 42 0.9500000 lbox
31 41 0.9500000 lbox
32 40 0.9500000 lbox
47 65 0.9500000 lbox
48 64 0.9500000 lbox
49 63 0.9500000 lbox
50 62 0.9500000 lbox
51 61 0.9500000 lbox
52 60 0.9500000 lbox
53 59 0.9500000 lbox
67 83 0.9500000 lbox
68 82 0.9500000 lbox
69 81 0.9500000 lbox
70 80 0.9500000 lbox
71 79 0.9500000 lbox
showpage
end
%%EOF
