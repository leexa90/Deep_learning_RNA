%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:39 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GACGCGACCGAAAUGGUGAAGGACGGGUCCAGUGCGAAACACGCACUGUUGAGUAGAGUGUGAGCUCCGUAACUGGUCGCGUC\
) def
/coor [
[96.70907593 367.32519531]
[96.70907593 352.32519531]
[96.70907593 337.32519531]
[96.70907593 322.32519531]
[96.70907593 307.32519531]
[96.70907593 292.32519531]
[96.70907593 277.32519531]
[96.70907593 262.32519531]
[96.70907593 247.32519531]
[96.70907593 232.32519531]
[84.35328674 221.08168030]
[83.82318878 204.04972839]
[95.92140961 191.57928467]
[95.36054230 176.58978271]
[94.79966736 161.60026550]
[94.23880005 146.61076355]
[86.03102875 134.18168640]
[93.24691010 120.10186005]
[80.93267059 109.28041840]
[80.01348877 92.91279602]
[91.03868103 80.78063965]
[82.29172516 67.59726715]
[89.05628204 54.32737350]
[87.93532562 39.36931610]
[72.35707092 30.50560951]
[65.10682678 14.28268147]
[68.82942963 -2.93477654]
[81.90328217 -14.50930500]
[79.66764832 -29.34176826]
[76.87896729 -44.08026505]
[73.54115295 -58.70418167]
[70.20334625 -73.32810211]
[66.86553192 -87.95201874]
[63.52771378 -102.57594299]
[60.18989944 -117.19985962]
[56.85208511 -131.82377625]
[44.08770752 -141.54232788]
[43.87157822 -157.58392334]
[56.36949921 -167.64282227]
[71.99413300 -164.00271606]
[78.75959015 -149.45596313]
[71.47600555 -135.16159058]
[74.81381989 -120.53767395]
[78.15163422 -105.91375732]
[81.48944855 -91.28983307]
[84.82726288 -76.66591644]
[88.16507721 -62.04199600]
[91.50289154 -47.41807938]
[95.20888519 -44.05714035]
[96.68315887 -38.24375153]
[94.50010681 -31.57740211]
[96.73574066 -16.74493980]
[108.46851349 -12.68805981]
[117.34619141 -3.90604424]
[121.57924652 7.91976833]
[120.27606201 20.48609352]
[113.62992859 31.31626701]
[102.89338684 38.24836349]
[104.01433563 53.20642090]
[112.68111420 65.31989288]
[105.99673462 79.65969086]
[116.62031555 86.82980347]
[121.17251587 98.81097412]
[117.99040985 111.22650146]
[108.23641968 119.54099274]
[116.48431396 133.04220581]
[109.22831726 146.04988098]
[109.78918457 161.03939819]
[110.35005188 176.02891541]
[110.91091919 191.01841736]
[121.87451935 199.09220886]
[126.04906464 211.84596252]
[122.09835815 224.46546936]
[111.70907593 232.32519531]
[111.70907593 247.32519531]
[111.70907593 262.32519531]
[111.70907593 277.32519531]
[111.70907593 292.32519531]
[111.70907593 307.32519531]
[111.70907593 322.32519531]
[111.70907593 337.32519531]
[111.70907593 352.32519531]
[111.70907593 367.32519531]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[6 78]
[7 77]
[8 76]
[9 75]
[10 74]
[13 70]
[14 69]
[15 68]
[16 67]
[18 65]
[21 61]
[23 59]
[24 58]
[28 52]
[29 51]
[30 48]
[31 47]
[32 46]
[33 45]
[34 44]
[35 43]
[36 42]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
