%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:48 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UUAUAUGACUGACGGAACGUGGAAUUAACCACAUGAAGUAUAACGAUGACAAUGCCGACCGUCUGGGCG\
) def
/coor [
[83.61658478 289.07546997]
[68.73806000 292.48022461]
[53.85762405 289.08386230]
[41.92979050 279.56072998]
[35.32284927 265.80169678]
[35.34860992 250.53860474]
[42.00195694 236.80195618]
[53.96186447 227.31915283]
[68.85368347 223.97303772]
[72.19149780 209.34912109]
[75.20034027 194.65399170]
[77.87869263 179.89505005]
[80.55704498 165.13610840]
[83.23539734 150.37715149]
[85.91374969 135.61820984]
[72.37979126 126.53683472]
[63.84693146 112.65050507]
[61.86020660 96.47358704]
[66.77933502 80.93519592]
[55.48326111 71.06610870]
[44.18719101 61.19702911]
[32.89111710 51.32794952]
[17.14146996 52.64102173]
[5.13044024 42.36917877]
[3.98395824 26.60653114]
[14.38221169 14.70477104]
[30.15610123 13.72500515]
[41.94725800 24.24851036]
[42.76020050 40.03187943]
[54.05627060 49.90095901]
[65.35234070 59.77003860]
[76.64841461 69.63912201]
[84.83174896 64.82893372]
[93.94668579 62.17888260]
[103.43341064 61.85171890]
[112.70925140 63.86754227]
[121.20452118 68.10254669]
[128.39746094 74.29661560]
[141.27418518 66.60312653]
[154.15092468 58.90964127]
[167.02764893 51.21615219]
[166.71766663 35.86038589]
[174.14114380 22.41466141]
[187.30120850 14.49580860]
[202.65788269 14.23395729]
[216.08026123 21.69954681]
[223.95782471 34.88436890]
[224.17153931 50.24177551]
[216.66392517 63.64069748]
[203.45446777 71.47689819]
[188.09646606 71.64247131]
[174.72114563 64.09288025]
[161.84440613 71.78636932]
[148.96768188 79.47985840]
[136.09094238 87.17334747]
[137.96824646 105.04890442]
[131.48471069 121.81266785]
[118.06805420 133.77314758]
[100.67269135 138.29656982]
[97.99433899 153.05551147]
[95.31598663 167.81445312]
[92.63763428 182.57339478]
[89.95928192 197.33233643]
[91.52819061 206.67301941]
[86.81541443 212.68693542]
[83.47760010 227.31085205]
[95.44284058 236.78691101]
[102.10391235 250.51982117]
[102.13825989 265.78289795]
] def
/pairs [
[9 66]
[10 65]
[11 63]
[12 62]
[13 61]
[14 60]
[15 59]
[19 32]
[20 31]
[21 30]
[22 29]
[38 55]
[39 54]
[40 53]
[41 52]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
