%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:39 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CGCCGCUGGUGUAGUGGUAUCAUGCAAGAUUCCCAUUCUUGCGACCCGGGUUCGAUUCCCGGGCGGCG\
) def
/coor [
[93.18076324 224.91522217]
[93.18076324 209.91522217]
[93.18076324 194.91522217]
[93.18076324 179.91522217]
[93.18076324 164.91522217]
[93.18076324 149.91522217]
[81.33262634 140.71621704]
[66.80048370 144.43333435]
[52.26834869 148.15045166]
[37.73620987 151.86756897]
[23.20407295 155.58468628]
[15.36327839 169.30683899]
[0.09419999 173.38493347]
[-13.54428864 165.39949036]
[-17.46071434 150.08815002]
[-9.33153152 136.53485107]
[6.02036047 132.78053284]
[19.48695564 141.05255127]
[34.01909256 137.33543396]
[48.55123138 133.61831665]
[63.08337021 129.90119934]
[77.61550903 126.18408203]
[70.07971191 95.81684875]
[89.18364716 76.38474274]
[87.14114380 61.52445221]
[85.09864807 46.66416168]
[83.05614471 31.80387497]
[81.01364899 16.94358444]
[78.97114563 2.08329582]
[65.63948059 -6.08987141]
[60.72949600 -20.93662453]
[66.55953979 -35.44678116]
[80.37683868 -42.76908493]
[95.65729523 -39.44617462]
[105.18593597 -27.04702187]
[104.46363068 -11.42612934]
[93.83143616 0.04079613]
[95.87393188 14.90108490]
[97.91643524 29.76137543]
[99.95893860 44.62166214]
[102.00143433 59.48195267]
[104.04393768 74.34223938]
[118.54837799 78.90099335]
[128.99420166 91.51128387]
[131.07049561 108.93498993]
[122.86827087 125.76264191]
[137.55453491 128.81448364]
[152.24079895 131.86631775]
[166.92706299 134.91816711]
[181.61331177 137.97000122]
[193.77908325 128.14511108]
[209.41284180 128.49050903]
[221.13284302 138.84307861]
[223.40522766 154.31468201]
[215.15705872 167.60008240]
[200.28288269 172.42631531]
[185.80580139 166.51460266]
[178.56147766 152.65626526]
[163.87521362 149.60441589]
[149.18894958 146.55258179]
[134.50270081 143.50074768]
[119.81643677 140.44889832]
[108.18076324 149.91522217]
[108.18076324 164.91522217]
[108.18076324 179.91522217]
[108.18076324 194.91522217]
[108.18076324 209.91522217]
[108.18076324 224.91522217]
] def
/pairs [
[1 68]
[2 67]
[3 66]
[4 65]
[5 64]
[6 63]
[7 22]
[8 21]
[9 20]
[10 19]
[11 18]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
