%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:39 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (4pkd_v)
} def

/sequence { (\
GAUCCAUUGCACUCCGGAUCCAGGAGAUACCAUGAUCACGAAGGUGGUUUUCCU\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 10 0.003713272 ubox
1 20 0.990029699 ubox
1 21 0.094751419 ubox
1 37 0.019192135 ubox
1 49 0.004112804 ubox
1 50 0.006628142 ubox
1 52 0.010929682 ubox
2 19 0.998029406 ubox
2 36 0.019309637 ubox
2 48 0.004660505 ubox
2 49 0.007476057 ubox
2 51 0.010765612 ubox
3 18 0.998621915 ubox
3 35 0.019320140 ubox
4 17 0.998962997 ubox
4 34 0.017574453 ubox
4 47 0.015472855 ubox
5 16 0.998125435 ubox
5 34 0.014623979 ubox
5 46 0.015547456 ubox
6 13 0.062663524 ubox
6 19 0.003807309 ubox
6 33 0.016759960 ubox
6 45 0.014696667 ubox
6 48 0.012681037 ubox
7 11 0.012859614 ubox
7 16 0.003881937 ubox
7 18 0.004116366 ubox
7 32 0.015734773 ubox
7 44 0.014101498 ubox
7 47 0.013353498 ubox
8 16 0.010949324 ubox
8 17 0.004151759 ubox
8 29 0.003410870 ubox
8 32 0.007968544 ubox
8 43 0.007844139 ubox
8 46 0.013525360 ubox
9 13 0.032631824 ubox
9 14 0.140346941 ubox
9 15 0.074156961 ubox
9 28 0.003509176 ubox
9 30 0.012306699 ubox
9 31 0.009047902 ubox
9 45 0.015984922 ubox
10 16 0.005885948 ubox
10 44 0.016468641 ubox
10 46 0.013245551 ubox
11 28 0.009688310 ubox
11 45 0.013449781 ubox
12 17 0.005258803 ubox
12 26 0.031186190 ubox
12 43 0.020018893 ubox
12 44 0.013248169 ubox
13 25 0.031356800 ubox
13 41 0.005594967 ubox
13 42 0.019785930 ubox
13 43 0.012438156 ubox
14 24 0.031374915 ubox
14 40 0.005576727 ubox
15 23 0.031366906 ubox
15 40 0.024929999 ubox
16 21 0.007309057 ubox
16 39 0.025087832 ubox
17 21 0.005124107 ubox
17 37 0.025964010 ubox
18 36 0.025984687 ubox
19 35 0.025980500 ubox
20 34 0.025529824 ubox
21 34 0.011414571 ubox
22 33 0.012376698 ubox
22 54 0.899081853 ubox
23 30 0.004246676 ubox
23 31 0.033380166 ubox
23 52 0.020916414 ubox
23 53 0.997996887 ubox
23 54 0.011174683 ubox
24 30 0.033320016 ubox
24 31 0.003532041 ubox
24 51 0.021191600 ubox
24 52 0.998440182 ubox
24 53 0.012000498 ubox
25 50 0.031213182 ubox
25 51 0.996248001 ubox
26 31 0.007582926 ubox
26 48 0.005322857 ubox
26 49 0.037538888 ubox
26 50 0.987845826 ubox
26 51 0.040833181 ubox
26 52 0.010590627 ubox
27 33 0.004552539 ubox
27 48 0.040620931 ubox
27 49 0.937005199 ubox
27 50 0.071852862 ubox
27 51 0.010534187 ubox
28 32 0.004242198 ubox
28 46 0.106933524 ubox
28 47 0.032120855 ubox
29 45 0.120208058 ubox
29 48 0.936301419 ubox
29 49 0.009412009 ubox
29 50 0.006095942 ubox
30 44 0.121170166 ubox
30 46 0.026881373 ubox
30 47 0.973414390 ubox
31 43 0.121068267 ubox
31 44 0.015765722 ubox
31 46 0.973253549 ubox
31 47 0.004446980 ubox
32 45 0.967956218 ubox
32 48 0.022243400 ubox
32 49 0.003632934 ubox
32 50 0.007858455 ubox
32 51 0.010515606 ubox
33 38 0.004389324 ubox
33 40 0.060109212 ubox
33 41 0.057906956 ubox
33 42 0.069330679 ubox
33 43 0.040319795 ubox
33 44 0.953205137 ubox
33 47 0.022155364 ubox
34 39 0.092575500 ubox
34 49 0.134311866 ubox
34 50 0.005210500 ubox
35 45 0.077326819 ubox
35 48 0.186453961 ubox
35 49 0.004388060 ubox
36 40 0.042102468 ubox
36 41 0.266426392 ubox
36 42 0.103774660 ubox
36 43 0.051565309 ubox
36 44 0.115951388 ubox
36 47 0.187328558 ubox
37 43 0.166520591 ubox
37 44 0.033400721 ubox
37 46 0.189094105 ubox
38 45 0.192491481 ubox
39 43 0.024587267 ubox
39 44 0.195176984 ubox
40 52 0.007086107 ubox
41 51 0.007086720 ubox
42 50 0.007006505 ubox
42 54 0.011405357 ubox
43 49 0.006562796 ubox
43 53 0.012672479 ubox
44 48 0.004269150 ubox
44 52 0.012663977 ubox
46 53 0.011946134 ubox
47 52 0.011998184 ubox
1 20 0.9500000 lbox
2 19 0.9500000 lbox
3 18 0.9500000 lbox
4 17 0.9500000 lbox
5 16 0.9500000 lbox
22 54 0.9500000 lbox
23 53 0.9500000 lbox
24 52 0.9500000 lbox
25 51 0.9500000 lbox
26 50 0.9500000 lbox
27 49 0.9500000 lbox
29 48 0.9500000 lbox
30 47 0.9500000 lbox
31 46 0.9500000 lbox
32 45 0.9500000 lbox
33 44 0.9500000 lbox
showpage
end
%%EOF
