%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:26 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UCCGUGAAACAAAGCGGAUGUACCGGAUUUUUAUUCCGGCUAUGGGGCAAUUCCCCGUCGCGGAGCCA\
) def
/coor [
[110.40945435 199.08071899]
[107.69271088 184.32879639]
[104.97596741 169.57687378]
[102.25922394 154.82495117]
[99.54248047 140.07301331]
[96.82573700 125.32109070]
[94.10899353 110.56916809]
[89.43669891 124.82292938]
[79.21619415 135.80206299]
[65.33286285 141.48124695]
[50.34776688 140.81285095]
[37.02519226 133.92016602]
[27.82276344 122.07469177]
[24.43804741 107.46155548]
[27.49542427 92.77644348]
[36.43089676 80.72832489]
[49.59614563 73.53970337]
[64.56256866 72.53666687]
[78.56932068 77.90424347]
[89.03096008 88.64968872]
[84.98400879 74.20592499]
[80.93705750 59.76216888]
[76.56237030 45.41427231]
[71.86220551 31.16967964]
[67.16204834 16.92508316]
[62.46189117 2.68048763]
[57.76173019 -11.56410789]
[43.17025375 -17.18752480]
[35.65248489 -30.89945984]
[38.75808334 -46.22555542]
[51.02068329 -55.92930222]
[66.65026093 -55.42888260]
[78.26699829 -44.96058273]
[80.38584137 -29.46721268]
[72.00632477 -16.26426697]
[76.70648193 -2.01967168]
[81.40664673 12.22492409]
[86.10680389 26.46951866]
[90.80696106 40.71411514]
[96.06903076 46.26135635]
[95.38081360 55.71521759]
[99.42776489 70.15897369]
[103.47472382 84.60273743]
[116.11028290 92.68621826]
[130.92022705 90.30597687]
[145.73016357 87.92574310]
[160.54011536 85.54550171]
[171.06776428 73.43979645]
[187.08949280 74.26678467]
[196.31478882 87.39208221]
[191.66680908 102.74707794]
[176.71107483 108.55272675]
[162.92034912 100.35544586]
[148.11041260 102.73568726]
[133.30046082 105.11592102]
[118.49051666 107.49616241]
[113.50874329 108.37819672]
[108.86091614 107.85242462]
[111.57765961 122.60434723]
[114.29440308 137.35627747]
[117.01114655 152.10820007]
[119.72789001 166.86012268]
[122.44463348 181.61204529]
[125.16137695 196.36398315]
[137.50358582 206.61334229]
[137.04151917 222.64973450]
[124.12962341 232.17141724]
[108.67280579 227.87417603]
] def
/pairs [
[1 64]
[2 63]
[3 62]
[4 61]
[5 60]
[6 59]
[7 58]
[20 43]
[21 42]
[22 41]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[44 56]
[45 55]
[46 54]
[47 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
