%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAGGGAGAGGUGAAGAAUACGACCACCUAGGUACCAUUGCACUCCGGUACCUAAAACAUACCCUC\
) def
/coor [
[92.62600708 174.65898132]
[92.62600708 159.65898132]
[92.62600708 144.65898132]
[92.62600708 129.65898132]
[92.62600708 114.65898895]
[89.88178253 111.27742767]
[88.33586121 107.54775238]
[87.96373749 103.84399414]
[73.11641693 101.70926666]
[58.26909256 99.57454681]
[43.42177200 97.43982697]
[28.57444954 95.30509949]
[19.65708351 107.74452209]
[5.97505856 114.60460663]
[-9.32759476 114.30896759]
[-22.73443794 106.92552948]
[-31.16467857 94.15095520]
[-32.68110657 78.92075348]
[-26.93526077 64.73471069]
[-15.24749184 54.85267639]
[-0.30356553 51.54546738]
[14.46251488 55.57305527]
[25.65760994 66.00993347]
[30.70917130 80.45777893]
[45.55649185 82.59249878]
[60.40381622 84.72722626]
[75.25113678 86.86194611]
[90.09845734 88.99666595]
[104.15270233 83.75470734]
[113.97561646 72.41846466]
[123.79852295 61.08221817]
[133.62144470 49.74597549]
[143.44435120 38.40973282]
[153.26725769 27.07348824]
[163.09016418 15.73724556]
[157.99101257 1.24952054]
[160.83464050 -13.84383297]
[170.85615540 -25.48277855]
[185.35978699 -30.53649902]
[200.44415283 -27.64556885]
[212.05163574 -17.58763313]
[217.05986023 -3.06822729]
[214.12165833 12.00700283]
[204.02738953 23.58289528]
[189.49235535 28.54559326]
[174.42640686 25.56015587]
[164.60350037 36.89640045]
[154.78059387 48.23264313]
[144.95768738 59.56888580]
[135.13476562 70.90512848]
[125.31185913 82.24137115]
[115.48894501 93.57762146]
[128.93722534 86.93354034]
[143.79505920 88.99388123]
[154.92796326 99.04665375]
[158.48875427 113.61788177]
[153.24688721 127.67216492]
[141.01382446 136.35272217]
[126.01696014 136.65979004]
[113.43881226 128.48727417]
[107.62600708 114.65898895]
[107.62600708 129.65898132]
[107.62600708 144.65898132]
[107.62600708 159.65898132]
[107.62600708 174.65898132]
] def
/pairs [
[1 65]
[2 64]
[3 63]
[4 62]
[5 61]
[8 28]
[9 27]
[10 26]
[11 25]
[12 24]
[29 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
