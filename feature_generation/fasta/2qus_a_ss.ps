%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GGAGCCCUGUCACCGGAUGUGCUUUCCGGUCUGAUGAGUCCGUGAGGACAAAACAGGGCUCCCGAAUU\
) def
/coor [
[137.26904297 260.81369019]
[133.22209167 246.36991882]
[129.17514038 231.92616272]
[125.12819672 217.48240662]
[121.08124542 203.03865051]
[117.03429413 188.59487915]
[112.98734283 174.15112305]
[108.94039154 159.70736694]
[104.89344025 145.26361084]
[100.84648895 130.81983948]
[77.46725464 121.04411316]
[69.30976868 97.05226898]
[55.17585373 92.02907562]
[41.04193878 87.00588226]
[26.90802574 81.98268127]
[12.77411175 76.95948792]
[-1.35980177 71.93629456]
[-14.75007057 80.01309967]
[-30.19119453 77.54212952]
[-40.39234924 65.69010162]
[-40.53685760 50.05318832]
[-30.55649185 38.01465607]
[-15.16367149 35.25873184]
[-1.62641799 43.08668137]
[3.66339254 57.80238342]
[17.79730606 62.82557678]
[31.93122101 67.84877014]
[46.06513214 72.87196350]
[60.19904709 77.89515686]
[74.33296204 82.91835022]
[78.12225342 78.27573395]
[82.73807526 74.45385742]
[88.00605011 71.59709930]
[93.72714996 69.81340027]
[99.68524170 69.17013550]
[105.65522003 69.69161987]
[111.41154480 71.35813904]
[116.73674774 74.10674286]
[127.69928741 63.86844635]
[138.66183472 53.63014984]
[149.62437439 43.39185333]
[153.88694763 27.55637169]
[169.79974365 23.59214783]
[180.99302673 35.57723618]
[175.95211792 51.18240356]
[159.86267090 54.35439301]
[148.90013123 64.59268951]
[137.93759155 74.83098602]
[126.97505188 85.06928253]
[130.62365723 96.42627716]
[129.68815613 108.31822968]
[124.30859375 118.96501160]
[115.29024506 126.77289581]
[119.33719635 141.21665955]
[123.38414764 155.66041565]
[127.43109894 170.10417175]
[131.47805786 184.54792786]
[135.52500916 198.99169922]
[139.57196045 213.43545532]
[143.61891174 227.87921143]
[147.66586304 242.32296753]
[151.71281433 256.76672363]
[166.03321838 263.04843140]
[172.91909790 277.08834839]
[169.11915588 292.25720215]
[156.42761230 301.39276123]
[140.83700562 300.18148804]
[129.70875549 289.19531250]
] def
/pairs [
[1 62]
[2 61]
[3 60]
[4 59]
[5 58]
[6 57]
[7 56]
[8 55]
[9 54]
[10 53]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[38 49]
[39 48]
[40 47]
[41 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
