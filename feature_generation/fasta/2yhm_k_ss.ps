%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\
) def
/coor [
[92.50000000 92.50000000]
[77.55017853 91.15493774]
[62.78112030 88.47518921]
[48.31172943 84.48232269]
[34.25851059 79.20849609]
[20.73461151 72.69616699]
[7.84892511 64.99777222]
[-4.29480076 56.17528915]
[-15.59879017 46.29975891]
[-25.97202873 35.45069885]
[-35.33099365 23.71545029]
[-43.60033417 11.18850899]
[-50.71346283 -2.02926779]
[-56.61311340 -15.83145428]
[-61.25178528 -30.10692215]
[-64.59212494 -44.74073029]
[-66.60723877 -59.61505890]
[-67.28090668 -74.61013794]
[-66.60769653 -89.60523987]
[-64.59303284 -104.47962189]
[-61.25314331 -119.11353302]
[-56.61491013 -133.38914490]
[-50.71567917 -147.19151306]
[-43.60295105 -160.40950012]
[-35.33399582 -172.93670654]
[-25.97538948 -184.67222595]
[-15.60248184 -195.52160645]
[-4.29879427 -205.39749146]
[7.84466267 -214.22033691]
[20.73011398 -221.91912842]
[34.25381470 -228.43186951]
[48.30687332 -233.70613098]
[62.77614212 -237.69943237]
[77.54512024 -240.37963867]
[92.49489594 -241.72515869]
[107.50510406 -241.72515869]
[122.45487976 -240.37963867]
[137.22386169 -237.69943237]
[151.69313049 -233.70613098]
[165.74618530 -228.43186951]
[179.26988220 -221.91912842]
[192.15533447 -214.22033691]
[204.29879761 -205.39749146]
[215.60247803 -195.52160645]
[225.97538757 -184.67222595]
[235.33399963 -172.93670654]
[243.60295105 -160.40950012]
[250.71568298 -147.19151306]
[256.61489868 -133.38914490]
[261.25314331 -119.11353302]
[264.59304810 -104.47962189]
[266.60769653 -89.60523987]
[267.28091431 -74.61013794]
[266.60723877 -59.61505890]
[264.59213257 -44.74073029]
[261.25177002 -30.10692215]
[256.61312866 -15.83145428]
[250.71347046 -2.02926779]
[243.60032654 11.18850899]
[235.33099365 23.71545029]
[225.97203064 35.45069885]
[215.59878540 46.29975891]
[204.29479980 56.17528915]
[192.15107727 64.99777222]
[179.26538086 72.69616699]
[165.74148560 79.20849609]
[151.68827820 84.48232269]
[137.21887207 88.47518921]
[122.44982147 91.15493774]
[107.50000000 92.50000000]
] def
/pairs [
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
