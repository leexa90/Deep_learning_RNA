%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:28 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CUCGUAUGGCGCAGUGGUAGCGCAGCAGAUUGCAAAUCUGUUGGUCCUUAGUUCGAUCCUGAGUGCGAG\
) def
/coor [
[92.50000000 213.15167236]
[92.50000000 198.15167236]
[92.50000000 183.15167236]
[92.50000000 168.15167236]
[92.50000000 153.15167236]
[92.50000000 138.15167236]
[92.50000000 123.15167999]
[73.42012024 106.94185638]
[77.53437805 79.21385193]
[62.67013550 81.22735596]
[47.80588913 83.24085236]
[32.94164276 85.25434875]
[24.74247551 98.57004547]
[9.88617039 103.45104980]
[-4.61258078 97.59270477]
[-11.90791130 83.76113892]
[-8.55518913 68.48719788]
[3.86253309 58.98276901]
[19.48198700 59.73554993]
[30.92814255 70.39010620]
[45.79238892 68.37660217]
[60.65663528 66.36310577]
[75.52088165 64.34960938]
[84.33766174 52.21435165]
[81.65930939 37.45540619]
[78.98095703 22.69646454]
[76.30260468 7.93752050]
[73.62424469 -6.82142353]
[70.94589233 -21.58036804]
[68.26753998 -36.33930969]
[65.58918762 -51.09825516]
[56.81182861 -65.60323334]
[68.32012939 -78.05294037]
[83.46911621 -70.44081879]
[80.34812927 -53.77660751]
[83.02648163 -39.01766586]
[85.70484161 -24.25872040]
[88.38319397 -9.49977684]
[91.06154633 5.25916672]
[93.73989868 20.01811028]
[96.41825104 34.77705383]
[99.09660339 49.53599930]
[111.42663574 58.07826614]
[126.18557739 55.39991379]
[140.94451904 52.72155762]
[155.70346069 50.04320526]
[162.31449890 36.00490189]
[175.93060303 28.56306076]
[191.31614685 30.57922554]
[202.55503845 41.27813721]
[205.32572937 56.54584503]
[198.56280518 70.51161194]
[184.86676025 77.80529785]
[169.50399780 75.62235260]
[158.38182068 64.80214691]
[143.62287903 67.48049927]
[128.86393738 70.15885925]
[114.10498810 72.83721161]
[123.85569763 82.89797974]
[127.77407074 95.74260712]
[125.50040436 108.38748932]
[118.05442047 118.13561249]
[107.50000000 123.15167999]
[107.50000000 138.15167236]
[107.50000000 153.15167236]
[107.50000000 168.15167236]
[107.50000000 183.15167236]
[107.50000000 198.15167236]
[107.50000000 213.15167236]
] def
/pairs [
[1 69]
[2 68]
[3 67]
[4 66]
[5 65]
[6 64]
[7 63]
[9 23]
[10 22]
[11 21]
[12 20]
[24 42]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[31 35]
[43 58]
[44 57]
[45 56]
[46 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
