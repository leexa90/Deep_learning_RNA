%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:49 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (5dqk_a)
} def

/sequence { (\
GGGUACUUAAGCCCACUGAUGAGUCGCUGGGAUGCGACGAAACGCCCA\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 13 0.013088155 ubox
1 14 0.983212193 ubox
1 16 0.005683194 ubox
1 27 0.003302596 ubox
1 46 0.004664544 ubox
1 47 0.176647094 ubox
2 12 0.013095616 ubox
2 13 0.983998423 ubox
2 14 0.006758238 ubox
2 45 0.004495976 ubox
2 46 0.176757475 ubox
2 47 0.004817062 ubox
3 12 0.983975587 ubox
3 13 0.006159742 ubox
3 25 0.003456152 ubox
3 43 0.004467444 ubox
3 45 0.176512574 ubox
3 46 0.004785218 ubox
4 9 0.006595126 ubox
4 10 0.029233582 ubox
4 11 0.964828707 ubox
4 42 0.004686221 ubox
4 44 0.170249962 ubox
5 20 0.005385310 ubox
5 24 0.014731181 ubox
6 11 0.025402561 ubox
6 18 0.016428140 ubox
6 21 0.038444205 ubox
6 23 0.020183458 ubox
6 31 0.004341872 ubox
6 36 0.004629041 ubox
6 39 0.014543576 ubox
6 44 0.004906507 ubox
7 11 0.004263332 ubox
7 18 0.004837885 ubox
7 19 0.034410662 ubox
7 21 0.006805239 ubox
7 22 0.031223888 ubox
7 30 0.004321822 ubox
7 37 0.013791073 ubox
7 39 0.004384039 ubox
7 40 0.018934765 ubox
7 41 0.043245357 ubox
7 42 0.019269696 ubox
8 15 0.005718581 ubox
8 18 0.036253099 ubox
8 19 0.014485317 ubox
8 21 0.031994219 ubox
8 22 0.003962104 ubox
8 29 0.003803831 ubox
8 34 0.003183078 ubox
8 36 0.013892819 ubox
8 37 0.005785421 ubox
8 39 0.019359554 ubox
8 40 0.040772351 ubox
8 41 0.018551792 ubox
8 42 0.009018259 ubox
9 17 0.032100226 ubox
9 20 0.029631668 ubox
9 33 0.003292426 ubox
10 17 0.081705320 ubox
10 20 0.007251877 ubox
10 28 0.005658980 ubox
10 33 0.009077144 ubox
11 16 0.084870290 ubox
11 17 0.005897614 ubox
11 20 0.004099001 ubox
11 24 0.003572697 ubox
11 27 0.006442570 ubox
11 33 0.016002306 ubox
11 35 0.022078482 ubox
11 38 0.010461624 ubox
11 43 0.005586703 ubox
12 18 0.015818992 ubox
12 21 0.015545592 ubox
12 23 0.004329641 ubox
12 26 0.006318719 ubox
12 31 0.043187743 ubox
12 34 0.016504623 ubox
12 39 0.009080875 ubox
13 18 0.019183882 ubox
13 21 0.012399120 ubox
13 30 0.046092938 ubox
13 31 0.003857456 ubox
13 39 0.003808956 ubox
14 18 0.011413096 ubox
14 21 0.063257923 ubox
14 29 0.046111876 ubox
14 30 0.003735922 ubox
15 20 0.053804490 ubox
15 24 0.051388738 ubox
15 28 0.045545553 ubox
16 21 0.105268080 ubox
16 23 0.059178130 ubox
16 26 0.007301840 ubox
16 39 0.015414429 ubox
16 44 0.137633039 ubox
17 21 0.009270688 ubox
17 22 0.070845817 ubox
17 26 0.044927169 ubox
17 39 0.010012556 ubox
17 40 0.005571823 ubox
17 41 0.040821684 ubox
17 42 0.051924783 ubox
17 44 0.428204091 ubox
17 48 0.039006108 ubox
18 25 0.047829056 ubox
18 27 0.004219285 ubox
18 38 0.006247143 ubox
18 43 0.588830596 ubox
18 45 0.101339292 ubox
18 46 0.041498908 ubox
18 47 0.050477686 ubox
19 24 0.042399554 ubox
20 39 0.017854144 ubox
20 40 0.066343239 ubox
20 41 0.512970681 ubox
20 42 0.162794109 ubox
20 44 0.051973745 ubox
20 48 0.015352675 ubox
21 35 0.003259932 ubox
21 38 0.012714989 ubox
21 43 0.060596332 ubox
21 45 0.008117409 ubox
21 46 0.006483161 ubox
21 47 0.018643064 ubox
23 27 0.003198492 ubox
23 33 0.007873458 ubox
23 38 0.994696681 ubox
23 43 0.005727856 ubox
23 45 0.004805556 ubox
24 32 0.008479977 ubox
24 37 0.996148142 ubox
24 40 0.007966667 ubox
24 42 0.003778678 ubox
24 44 0.003485493 ubox
25 31 0.008674550 ubox
25 36 0.996936427 ubox
25 39 0.008647662 ubox
26 35 0.996961059 ubox
26 38 0.008587702 ubox
27 34 0.996632688 ubox
28 32 0.030434444 ubox
28 34 0.004527256 ubox
28 36 0.006161444 ubox
28 37 0.004988077 ubox
28 48 0.042793866 ubox
29 33 0.017384088 ubox
29 35 0.006543580 ubox
29 47 0.056387318 ubox
30 35 0.005186901 ubox
30 46 0.056382551 ubox
30 47 0.020424895 ubox
31 45 0.050965598 ubox
31 46 0.020404553 ubox
33 40 0.003231144 ubox
33 41 0.003617956 ubox
33 42 0.005305212 ubox
33 44 0.041968623 ubox
34 38 0.003187121 ubox
34 43 0.042552963 ubox
34 45 0.035995158 ubox
35 39 0.004489495 ubox
35 44 0.042905609 ubox
36 43 0.042623247 ubox
38 44 0.013863342 ubox
39 43 0.035218750 ubox
39 45 0.048241050 ubox
39 46 0.072297740 ubox
39 47 0.061012138 ubox
1 14 0.9500000 lbox
2 13 0.9500000 lbox
3 12 0.9500000 lbox
4 11 0.9500000 lbox
23 38 0.9500000 lbox
24 37 0.9500000 lbox
25 36 0.9500000 lbox
26 35 0.9500000 lbox
27 34 0.9500000 lbox
showpage
end
%%EOF
