%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:07:13 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (5xh6_b)
} def

/sequence { (\
AUUUCUACUCUUGUAGAUGGAAAUUAGGUGCGCUUGGCA\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 18 0.037125295 ubox
1 24 0.439787250 ubox
1 25 0.036614483 ubox
1 29 0.021290366 ubox
2 17 0.019381384 ubox
2 19 0.171771750 ubox
2 20 0.071919845 ubox
2 21 0.111412644 ubox
2 22 0.067053345 ubox
2 23 0.518075467 ubox
2 26 0.006189457 ubox
2 27 0.010953330 ubox
2 28 0.022951912 ubox
3 16 0.008396098 ubox
3 17 0.034407789 ubox
3 19 0.089203466 ubox
3 20 0.113477738 ubox
3 21 0.075408225 ubox
3 22 0.548707508 ubox
3 23 0.018226283 ubox
3 26 0.013382622 ubox
3 27 0.023145072 ubox
3 28 0.005649938 ubox
4 15 0.005118503 ubox
4 16 0.004644450 ubox
4 17 0.777368670 ubox
4 19 0.035064435 ubox
4 20 0.047540740 ubox
4 21 0.552555905 ubox
4 22 0.011031669 ubox
4 26 0.008474100 ubox
4 28 0.028496097 ubox
5 13 0.003436295 ubox
5 16 0.830765097 ubox
5 19 0.030823175 ubox
5 20 0.552856701 ubox
5 27 0.038800379 ubox
6 15 0.832024946 ubox
6 17 0.003572626 ubox
6 19 0.550639114 ubox
6 26 0.038800232 ubox
6 30 0.003634686 ubox
7 14 0.833309964 ubox
7 18 0.538341981 ubox
7 25 0.038124444 ubox
7 29 0.006329168 ubox
8 13 0.833312575 ubox
8 16 0.193309277 ubox
8 19 0.011727981 ubox
8 20 0.004245131 ubox
8 27 0.003229548 ubox
8 28 0.006796363 ubox
9 13 0.003854217 ubox
9 15 0.184144402 ubox
9 16 0.039555508 ubox
9 17 0.503446769 ubox
9 20 0.006620350 ubox
9 21 0.039588523 ubox
9 23 0.004419344 ubox
9 27 0.003424926 ubox
9 28 0.005739930 ubox
10 16 0.506698972 ubox
10 19 0.009016833 ubox
10 20 0.040185367 ubox
10 27 0.009201078 ubox
10 28 0.007303277 ubox
11 15 0.456507489 ubox
11 16 0.008235949 ubox
11 17 0.011361974 ubox
11 19 0.039644999 ubox
11 21 0.005238451 ubox
11 22 0.005771810 ubox
11 26 0.009054511 ubox
11 27 0.007371908 ubox
12 16 0.010435450 ubox
12 17 0.013260315 ubox
12 20 0.005366506 ubox
12 21 0.006254417 ubox
12 26 0.007365343 ubox
12 32 0.004997357 ubox
13 24 0.007134857 ubox
13 25 0.006810328 ubox
13 31 0.006598366 ubox
14 19 0.003482644 ubox
14 23 0.007649490 ubox
14 30 0.006595900 ubox
15 29 0.006497302 ubox
16 25 0.011756770 ubox
17 24 0.031173957 ubox
17 25 0.009282378 ubox
17 29 0.013604830 ubox
18 22 0.008379360 ubox
18 23 0.043471641 ubox
18 26 0.044151851 ubox
18 27 0.020247478 ubox
18 28 0.017713321 ubox
18 32 0.018067556 ubox
18 37 0.005520913 ubox
18 39 0.026904190 ubox
19 24 0.018888486 ubox
19 25 0.046985521 ubox
19 29 0.008645982 ubox
19 31 0.028088500 ubox
19 33 0.010661033 ubox
19 34 0.009542964 ubox
19 38 0.033063594 ubox
20 24 0.031496870 ubox
20 25 0.021012229 ubox
20 29 0.009548749 ubox
20 31 0.010773628 ubox
20 33 0.010349143 ubox
20 35 0.006422834 ubox
20 38 0.025548161 ubox
21 25 0.011152467 ubox
21 29 0.022392390 ubox
21 34 0.006059934 ubox
21 35 0.005418023 ubox
22 29 0.014198945 ubox
22 34 0.004819613 ubox
22 35 0.010391546 ubox
23 29 0.025251765 ubox
23 34 0.008523189 ubox
23 35 0.012797698 ubox
24 28 0.024719073 ubox
24 30 0.004384432 ubox
24 36 0.012172466 ubox
24 37 0.127124846 ubox
24 39 0.005038757 ubox
25 30 0.003512070 ubox
25 32 0.005272556 ubox
25 36 0.180258993 ubox
25 37 0.006719054 ubox
25 39 0.005744244 ubox
26 34 0.059053789 ubox
26 35 0.186315021 ubox
27 31 0.009377952 ubox
27 33 0.064082547 ubox
27 34 0.187670283 ubox
27 35 0.003938929 ubox
27 38 0.036508399 ubox
28 33 0.186491219 ubox
28 34 0.004095738 ubox
28 35 0.006001314 ubox
28 38 0.075320678 ubox
29 36 0.032087936 ubox
29 37 0.074662694 ubox
29 39 0.751243712 ubox
30 35 0.017681823 ubox
30 38 0.955375391 ubox
31 36 0.036903693 ubox
31 37 0.955357829 ubox
32 38 0.109159961 ubox
33 37 0.108487548 ubox
4 17 0.9500000 lbox
5 16 0.9500000 lbox
6 15 0.9500000 lbox
7 14 0.9500000 lbox
8 13 0.9500000 lbox
29 39 0.9500000 lbox
30 38 0.9500000 lbox
31 37 0.9500000 lbox
showpage
end
%%EOF
