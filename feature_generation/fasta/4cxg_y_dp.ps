%!PS-Adobe-3.0 EPSF-3.0
%%Title: RNA Dot Plot
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:38 2017
%%BoundingBox: 0 0 700 720
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
%This file contains the square roots of the base pair probabilities in the form
% i  j  sqrt(p(i,j)) ubox

%%BeginProlog
/DPdict 100 dict def
DPdict begin
/logscale false def
/lpmin 1e-05 log def

/DataVisible  [ true true true true] def
/DataTitles   [ false false false false ] def

/min { 2 copy gt { exch } if pop } bind def

/max { 2 copy lt { exch } if pop } bind def

/box { %size x y box - draws box centered on x,y
   2 index 0.5 mul sub            % x -= 0.5
   exch 2 index 0.5 mul sub exch  % y -= 0.5
   3 -1 roll dup rectfill
} bind def

/ubox {
   logscale {
      log dup add lpmin div 1 exch sub dup 0 lt { pop 0 } if
   } if
   3 1 roll
   exch len exch sub 1 add box
} bind def

/lbox {
   3 1 roll
   len exch sub 1 add box
} bind def

/drawseq {
% print sequence along all 4 sides
[ [0.7 -0.3 0 ]
  [0.7 0.7 len add 0]
  [-0.3 len sub -0.4 -90]
  [-0.3 len sub 0.7 len add -90]
] {
   gsave
    aload pop rotate translate
    0 1 len 1 sub {
     dup 0 moveto
     sequence exch 1 getinterval
     show
    } for
   grestore
  } forall
} bind def

/drawgrid{
  gsave
  0.5 dup translate  0.01 setlinewidth
  len log 0.9 sub cvi 10 exch exp  % grid spacing
  dup 1 gt {
     dup dup 20 div dup 2 array astore exch 40 div setdash
  } { [0.3 0.7] 0.1 setdash } ifelse
  0 exch len {
     dup dup
     0 moveto
     len lineto
     dup
     len exch sub 0 exch moveto
     len exch len exch sub lineto
     stroke
  } for
  [] 0 setdash
  0.04 setlinewidth
  currentdict /cutpoint known {
    cutpoint 1 sub
    dup dup -1 moveto len 1 add lineto
    len exch sub dup
    -1 exch moveto len 1 add exch lineto
    stroke
  } if
  %% draw diagonal
  0 len moveto len 0 lineto stroke
  grestore
} bind def

/drawTitle {
  currentdict /DPtitle known {
    % center title text
    /Helvetica findfont 10 scalefont setfont
    360 705 moveto DPtitle dup stringwidth pop 2 div neg 0 rmoveto show
  } if
} bind def

/prepareCoords {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      DataSource exch get dup currentdict exch known {
        % data source s_j is present, so find length of array
        currentdict exch get length 
      } { pop 0 } ifelse
    } if
  } for
  exch dup 5 -1 roll add 4 -1 roll dup 5 1 roll 4 -1 roll add max
  len add 3 add 700 exch div dup scale
  exch 1 add exch 1 add translate
} bind def

/utri{ % i j prob utri
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.33
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uUDmotif{ % i j uUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lUDmotif{ % i j lUDmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95 0.6
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def

/uHmotif{ % i j uHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  exch 1 sub dup len exch sub dup 4 -1 roll dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/lHmotif{ % i j lHmotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  dup len exch sub dup 4 -1 roll 1 sub dup 3 1 roll dup len exch sub
  moveto lineto lineto closepath fill
  grestore
} bind def
/uImotif{ % i j k l uImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  1 sub dup 5 1 roll exch len exch sub dup 5 1 roll 3 -1 roll dup
  5 1 roll exch 4 1 roll 3 1 roll exch 1 sub len exch sub dup 3 1 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/lImotif{ % i j k l lImotif
  gsave
  0.5 dup translate
  1 min 2 div
  0.85 mul 0.15 add 0.95  0.99
  3 1 roll % prepare hsb color
  sethsbcolor
  % now produce the coordinates for lines
  4 -1 roll 1 sub dup 5 1 roll exch 1 sub len exch sub dup 3 -1 roll exch
  5 -1 roll len exch sub dup 6 -1 roll dup 3 1 roll 7 4 roll
  moveto lineto lineto lineto closepath fill
  grestore
} bind def
/drawDataSquareBottom { % x v n dataSquareBottom draw box
  len add 2 add exch lbox
} bind def

/drawDataSquareTop { % x v n dataSquareBottom draw box
  neg 1 sub exch lbox
} bind def

/drawDataSquareLeft { % y v n dataSquareBottom draw box
  neg 1 sub 3 1 roll lbox
} bind def

/drawDataSquareRight { % y v n dataSquareBottom draw box
  % use size x y box to draw box
  2 add len add 3 1 roll lbox
} bind def

/drawDataSquareBottomHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  len add 2 add 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareTopHSB { % x v h s b n dataSquareBottomHSB draw box
  % use size x y box to draw box
  neg 1 sub 5 1 roll sethsbcolor lbox
} bind def

/drawDataSquareLeftHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  neg 1 sub 6 1 roll sethsbcolor lbox
} bind def

/drawDataSquareRightHSB { % x v h s b n dataSquareLeftHSB draw box
  % use size x y box to draw box
  2 add len add 6 1 roll sethsbcolor lbox
} bind def

/drawDataTitleBottom {
  /Helvetica findfont 0.95 scalefont setfont
  0 -1.4 3 -1 roll sub moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleTop {
  /Helvetica findfont 0.95 scalefont setfont
  0 len 1.6 add 3 -1 roll add moveto 
  dup stringwidth pop neg 0 rmoveto   
  show
} bind def

/drawDataTitleLeft {
  /Helvetica findfont 0.95 scalefont setfont
  neg 1.4 sub len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

/drawDataTitleRight {
  /Helvetica findfont 0.95 scalefont setfont
  1.6 add len add len 1 add moveto 
  dup stringwidth pop 0 exch rmoveto -90 rotate
  show 90 rotate
} bind def

% do not modify the arrays below unless you know what you're doing!
/DataSource     [ /topData /leftData /bottomData /rightData ] def
/DataDrawBox    [ /drawDataSquareTop  /drawDataSquareLeft /drawDataSquareBottom /drawDataSquareRight] def
/DataDrawBoxHSB [ /drawDataSquareTopHSB /drawDataSquareLeftHSB /drawDataSquareBottomHSB /drawDataSquareRightHSB ] def
/DataDrawTitle  [ /drawDataTitleTop /drawDataTitleLeft /drawDataTitleBottom /drawDataTitleRight ] def

% this is the logic to parse the auxiliary linear data
% given in arrays topData, leftData, bottomData, and rightData
% See also the Boolean arrays DataVisible and DataTitles that
% are used to control which part of data will be visible
/drawData {
  0 1 3 {
    % check whether we want to display current data
    dup DataVisible exch get
    {
      % check whether we've actually got some data
      dup DataSource exch get dup currentdict exch known {
        % data source s_j is present, so we load the
        % corresponding data array a and loop over all data sets a[i]
        currentdict exch get dup length 1 sub 0 1 3 -1 roll {
          dup dup
          % now on stack: j a i i i

          % load data set, i.e. a[i]
          4 -1 roll         % j i i i a
          dup 3 -1 roll get dup % j i i a a[i] a[i]

          % 1. check whether we need to process data set title
          6 -1 roll dup 7 1 roll DataTitles exch get {
            % get current title drawing function key
            6 -1 roll dup 7 1 roll DataDrawTitle exch get
            % now on stack: ... j i i a a[i] a[i] title_draw_key

            % get current title and execute drawing function
            exch 0 get exch currentdict exch get 5 -1 roll exch exec
          } { % remove unused variables
              pop 3 -1 roll pop
          } ifelse
          % now on stack: ... j i a a[i]

          % 2. process actual data a[k] for 1 <= k < n
          dup length 1 sub 1 exch getinterval { 
            % on stack: j i a a[i][k]
            gsave
            dup length 2 eq { % print black box if two-valued
              % get box drawing function
              4 -1 roll dup 5 1 roll DataDrawBox exch get currentdict exch get exch
              aload pop 5 -1 roll dup 6 1 roll 4 -1 roll exec
            } {
              dup length 5 eq { % print box with hsb color
                % get box drawing function
                4 -1 roll dup 5 1 roll DataDrawBoxHSB exch get currentdict exch get exch
                % on stack: j i a f a[i]
                % load data array and prepare for drawing
                aload pop 8 -1 roll dup 9 1 roll 7 -1 roll exec
              } { pop } ifelse
            } ifelse
            grestore
          } forall
          exch pop 
          % left on stack: j a
        } for
        
      } if
    } if
  } for
} bind def

end
%EndProlog

DPdict begin

/DPtitle {
  (4cxg_y)
} def

/sequence { (\
GCGGAUUUAGCUCAGUUGGGAGAGCGCCGGUCUCCAAAACCGGAGGUCCUGUGUUCGAUCCACAGAAUUCGCACCA\
) } def

/len { sequence length } bind def

% BEGIN linear data array

/topData [
] def

/leftData [
] def

/bottomData [
] def

/rightData [
] def

% END linear data arrays

%Finally, prepare canvas

%draw title
drawTitle

%prepare coordinate system, draw grid and sequence
/Helvetica findfont 0.95 scalefont setfont

%prepare coordinate system
prepareCoords

%draw sequence arround grid
drawseq

%draw grid
drawgrid

%draw auxiliary linear data (if available)
drawData

%data (commands) starts here

%start of quadruplex data

%start of Hmotif data

%start of Imotif data
%start of base pair probability data
1 11 0.010735433 ubox
1 72 0.999042917 ubox
1 74 0.003350811 ubox
1 75 0.005028573 ubox
2 10 0.010753173 ubox
2 71 0.999798576 ubox
3 70 0.999669944 ubox
3 75 0.009612765 ubox
4 11 0.003223287 ubox
4 13 0.009091112 ubox
4 69 0.998746623 ubox
4 70 0.009274836 ubox
4 74 0.009604864 ubox
5 12 0.008632292 ubox
5 16 0.003756499 ubox
5 68 0.998444211 ubox
5 69 0.012543629 ubox
6 15 0.004160804 ubox
6 65 0.004780837 ubox
6 66 0.040628577 ubox
6 67 0.992344701 ubox
7 14 0.005612357 ubox
7 15 0.003904014 ubox
7 19 0.003304082 ubox
7 64 0.008022619 ubox
7 65 0.056263604 ubox
7 66 0.883825110 ubox
7 67 0.047438915 ubox
8 14 0.009350474 ubox
8 15 0.007066415 ubox
8 18 0.027415909 ubox
8 62 0.003562232 ubox
8 64 0.063549770 ubox
8 65 0.734017752 ubox
8 66 0.048518199 ubox
8 67 0.018185737 ubox
9 16 0.033575205 ubox
9 17 0.107630709 ubox
9 47 0.006314979 ubox
9 68 0.011818033 ubox
9 69 0.011304954 ubox
10 16 0.163185204 ubox
10 17 0.008019810 ubox
10 25 0.019432934 ubox
10 61 0.007768015 ubox
10 63 0.394519976 ubox
10 68 0.017511310 ubox
10 72 0.007311885 ubox
11 15 0.166026070 ubox
11 18 0.039007076 ubox
11 19 0.005117018 ubox
11 20 0.048067019 ubox
11 22 0.007154290 ubox
11 24 0.019483214 ubox
11 45 0.009005500 ubox
11 65 0.348438422 ubox
11 71 0.007312415 ubox
12 18 0.005230776 ubox
12 19 0.048228299 ubox
12 20 0.003878074 ubox
12 21 0.012477176 ubox
12 23 0.019482633 ubox
12 44 0.009061728 ubox
12 62 0.035198076 ubox
12 64 0.342976013 ubox
12 65 0.038212354 ubox
12 66 0.436654858 ubox
12 67 0.008246408 ubox
13 18 0.052834676 ubox
13 19 0.004987156 ubox
13 20 0.012882487 ubox
13 22 0.019480516 ubox
13 43 0.009047480 ubox
13 65 0.476757088 ubox
15 40 0.008870204 ubox
15 59 0.012153021 ubox
15 60 0.004810452 ubox
15 61 0.008917552 ubox
15 63 0.671593208 ubox
15 68 0.003410711 ubox
16 39 0.008823974 ubox
16 58 0.012632723 ubox
16 62 0.481222569 ubox
16 64 0.113109051 ubox
16 65 0.156288804 ubox
16 66 0.009122762 ubox
16 67 0.003817770 ubox
17 38 0.008566729 ubox
17 57 0.012581756 ubox
17 62 0.783928362 ubox
17 64 0.314505496 ubox
17 65 0.007445108 ubox
18 56 0.007848510 ubox
18 59 0.003648194 ubox
18 60 0.089011604 ubox
18 61 0.933753922 ubox
18 63 0.317495355 ubox
19 35 0.009116829 ubox
19 55 0.006360751 ubox
19 59 0.087833940 ubox
19 60 0.933685809 ubox
19 61 0.340035089 ubox
20 34 0.009144546 ubox
20 59 0.909381619 ubox
20 60 0.340677171 ubox
21 33 0.009158545 ubox
21 59 0.324966258 ubox
22 32 0.009162130 ubox
22 48 0.004951812 ubox
22 56 0.998685658 ubox
23 31 0.008832596 ubox
23 47 0.005008001 ubox
23 55 0.998829216 ubox
24 54 0.999218248 ubox
24 56 0.007821682 ubox
25 29 0.007215170 ubox
25 30 0.004448942 ubox
25 45 0.005051947 ubox
25 53 0.999696238 ubox
26 52 0.999264566 ubox
26 54 0.004074615 ubox
27 43 0.010574556 ubox
27 51 0.998834646 ubox
27 53 0.004140664 ubox
28 42 0.010618527 ubox
28 51 0.029663743 ubox
29 41 0.010625020 ubox
29 48 0.058250902 ubox
29 49 0.996836755 ubox
29 50 0.027135473 ubox
30 40 0.010623165 ubox
30 47 0.056887983 ubox
30 48 0.997385422 ubox
30 49 0.026696766 ubox
31 39 0.010281208 ubox
31 46 0.967088351 ubox
32 45 0.997406487 ubox
32 46 0.068271076 ubox
33 44 0.999283623 ubox
33 45 0.029726444 ubox
34 43 0.999881708 ubox
35 42 0.998998021 ubox
35 43 0.003456055 ubox
49 65 0.016410508 ubox
50 64 0.020935545 ubox
51 63 0.021612817 ubox
52 62 0.021605113 ubox
53 61 0.021394378 ubox
57 61 0.004496926 ubox
57 63 0.008220459 ubox
59 66 0.003312519 ubox
60 65 0.004173526 ubox
1 72 0.9500000 lbox
2 71 0.9500000 lbox
3 70 0.9500000 lbox
4 69 0.9500000 lbox
5 68 0.9500000 lbox
6 67 0.9500000 lbox
7 66 0.9500000 lbox
8 65 0.9500000 lbox
17 62 0.9500000 lbox
18 61 0.9500000 lbox
19 60 0.9500000 lbox
20 59 0.9500000 lbox
22 56 0.9500000 lbox
23 55 0.9500000 lbox
24 54 0.9500000 lbox
25 53 0.9500000 lbox
26 52 0.9500000 lbox
27 51 0.9500000 lbox
29 49 0.9500000 lbox
30 48 0.9500000 lbox
31 46 0.9500000 lbox
32 45 0.9500000 lbox
33 44 0.9500000 lbox
34 43 0.9500000 lbox
35 42 0.9500000 lbox
showpage
end
%%EOF
