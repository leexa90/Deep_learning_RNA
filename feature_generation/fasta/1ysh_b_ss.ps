%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:26 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UAGACGGUGGGAGAGGGUGGUGGAAUUCCCGGAGUAGCGGUGAAAUGCGCAGAUACCGGGAGGAACGCCGAUGGCGAAGGCAGCCACCUGGUCCACCCGUG\
) def
/coor [
[79.66043854 429.77069092]
[65.69741821 421.87048340]
[63.31063843 406.00595093]
[74.33104706 394.34704590]
[75.25445557 379.37548828]
[76.17787170 364.40393066]
[77.10128784 349.43240356]
[67.07583618 338.47674561]
[67.79903412 323.28033447]
[79.35829163 312.83898926]
[80.28170013 297.86743164]
[81.20511627 282.89590454]
[71.17966461 271.94024658]
[71.90286255 256.74380493]
[83.46212006 246.30249023]
[84.38553619 231.33093262]
[85.30894470 216.35939026]
[86.23236084 201.38783264]
[87.15577698 186.41629028]
[88.07918549 171.44473267]
[89.00260162 156.47319031]
[82.06347656 143.29374695]
[90.63565063 129.99606323]
[73.14385986 116.31570435]
[69.06348419 94.48761749]
[80.43218231 75.41230011]
[74.16277313 61.78532028]
[67.89337158 48.15834045]
[61.62396622 34.53136444]
[55.35456085 20.90438271]
[49.08515549 7.27740431]
[42.81575012 -6.34957457]
[30.01875687 -15.65266705]
[31.72833061 -30.44883728]
[25.45892525 -44.07581711]
[10.21242046 -54.25661087]
[12.30738640 -71.60489655]
[5.62131119 -85.03234863]
[-1.06476402 -98.45980072]
[-16.38943291 -100.89580536]
[-27.33165741 -111.89795685]
[-29.68392563 -127.23571014]
[-22.54174423 -141.01136780]
[-8.65142822 -147.92791748]
[6.64591312 -145.32582092]
[17.46813965 -134.20561218]
[19.65388489 -118.84324646]
[12.36268520 -105.14587402]
[19.04876137 -91.71842194]
[25.73483658 -78.29097748]
[37.19232178 -74.08463287]
[42.82945633 -62.80661392]
[39.08590317 -50.34522247]
[45.35530853 -36.71824265]
[57.70387268 -28.38984108]
[56.44272995 -12.61897945]
[62.71213531 1.00799942]
[68.98153687 14.63497829]
[75.25094604 28.26195717]
[81.52034760 41.88893509]
[87.78975677 55.51591492]
[94.05915833 69.14289856]
[103.29654694 68.74960327]
[112.24855042 71.06166077]
[120.14019775 75.87890625]
[126.28830719 82.78432465]
[140.43562317 77.79899597]
[154.58293152 72.81367493]
[168.73025513 67.82835388]
[181.65946960 56.86151123]
[195.77688599 66.24952698]
[190.66384888 82.41409302]
[173.71557617 81.97566986]
[159.56825256 86.96099091]
[145.42094421 91.94631195]
[131.27362061 96.93164062]
[130.79716492 106.24414825]
[127.60886383 115.00683594]
[121.98947906 122.44809723]
[114.43382263 127.91270447]
[105.60720062 130.91947937]
[112.48027802 145.16978455]
[103.97415161 157.39660645]
[103.05073547 172.36814880]
[102.12732697 187.33970642]
[101.20391083 202.31124878]
[100.28049469 217.28280640]
[99.35708618 232.25434875]
[98.43367004 247.22590637]
[108.62219238 259.00857544]
[107.47244263 274.17871094]
[96.17666626 283.81930542]
[95.25325012 298.79086304]
[94.32984161 313.76239014]
[104.51836395 325.54510498]
[103.36861420 340.71520996]
[92.07283783 350.35580444]
[91.14942169 365.32736206]
[90.22600555 380.29891968]
[89.30259705 395.27044678]
[98.80672455 408.19528198]
] def
/pairs [
[4 100]
[5 99]
[6 98]
[7 97]
[10 94]
[11 93]
[12 92]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[23 81]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[32 56]
[34 54]
[35 53]
[37 50]
[38 49]
[39 48]
[66 76]
[67 75]
[68 74]
[69 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
