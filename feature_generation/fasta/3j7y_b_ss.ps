%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:31 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CCAGAGUGUAGCUUAACACAAAGCACCCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGA\
) def
/coor [
[91.65230560 119.24763489]
[85.16835022 114.83838654]
[80.75615692 108.35643005]
[79.03204346 100.70721436]
[64.85046387 95.82020569]
[50.66888809 90.93319702]
[36.48730850 86.04618835]
[22.30573273 81.15917969]
[8.12415409 76.27217102]
[-6.05742311 71.38516235]
[-20.87790298 69.07142639]
[-35.87423325 69.40325928]
[-50.87056351 69.73509216]
[-65.86688995 70.06692505]
[-76.60977936 81.65855408]
[-92.40562439 82.17520905]
[-103.88302612 71.31037140]
[-104.23265076 55.50994492]
[-93.24707031 44.14805603]
[-77.44383240 43.96550369]
[-66.19872284 55.07059479]
[-51.20239258 54.73876190]
[-36.20606232 54.40692902]
[-21.20973396 54.07509995]
[-30.84776878 42.58126068]
[-32.22492981 27.64461517]
[-24.85098267 14.58226871]
[-11.35088348 8.04412365]
[3.46963525 10.35761356]
[14.33480263 20.69918633]
[17.37686348 35.38747787]
[11.51291370 49.19378281]
[-1.17041457 57.20358658]
[13.01116276 62.09059525]
[27.19274139 66.97760010]
[41.37431717 71.86460876]
[55.55589676 76.75161743]
[69.73747253 81.63862610]
[83.91905212 86.52563477]
[104.60379028 79.53147888]
[120.30170441 94.70884705]
[135.21002197 96.36475372]
[150.11833191 98.02066803]
[165.02665710 99.67657471]
[175.49859619 88.37858582]
[190.44053650 85.44741821]
[204.08200073 91.80149841]
[211.27999878 104.81407166]
[226.18832397 106.46997833]
[241.09663391 108.12588501]
[256.00494385 109.78179932]
[268.18753052 99.71400452]
[283.91278076 101.29253387]
[293.85122681 113.58087158]
[292.10650635 129.28855896]
[279.71380615 139.09651184]
[264.02542114 137.18583679]
[254.34904480 124.69011688]
[239.44073486 123.03420258]
[224.53240967 121.37829590]
[209.62408447 119.72238922]
[199.74607849 130.83827209]
[185.04277039 134.04402161]
[171.10823059 127.90545654]
[163.37074280 114.58489227]
[148.46243286 112.92898560]
[133.55410767 111.27307129]
[118.64579010 109.61716461]
[113.81247711 115.79148102]
[107.04976654 119.75996399]
] def
/pairs [
[4 39]
[5 38]
[6 37]
[7 36]
[8 35]
[9 34]
[10 33]
[11 24]
[12 23]
[13 22]
[14 21]
[41 68]
[42 67]
[43 66]
[44 65]
[48 61]
[49 60]
[50 59]
[51 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
