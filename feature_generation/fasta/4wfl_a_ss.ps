%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:43 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCCGUGCUAAGCGGGGAGGUAGCGGUGCCCUGUACCUGCAAUCCGCUCUAGCAGGGCCGAAUCCCUUCUCGAGGUUCGGUAACGAAUCGACAGAAGGUGCACGGU\
) def
/coor [
[140.63360596 113.64900208]
[125.79800415 111.43430328]
[110.96240234 109.21960449]
[97.88511658 114.16695404]
[86.82289886 105.61599731]
[71.98729706 103.40129852]
[57.15169525 101.18659973]
[42.31608963 98.97190094]
[27.48048782 96.75720215]
[12.61369610 94.76258850]
[-2.28102016 92.98848724]
[-17.17573738 91.21439362]
[-32.07045364 89.44029236]
[-46.96516800 87.66619873]
[-61.92401505 86.55580139]
[-75.94741058 93.88076019]
[-88.43981171 85.76970673]
[-103.43321991 85.32520294]
[-118.42663574 84.88070679]
[-133.42004395 84.43620300]
[-148.41345215 83.99170685]
[-159.86453247 94.55155945]
[-175.06365967 93.88718414]
[-185.06030273 82.90525818]
[-200.05371094 82.46076202]
[-216.06506348 88.03507996]
[-225.85391235 74.19258118]
[-215.26220703 60.95429611]
[-199.60920715 67.46734619]
[-184.61579895 67.91184235]
[-173.98612976 57.54141235]
[-158.77435303 57.77861023]
[-147.96896362 68.99829102]
[-132.97554016 69.44278717]
[-117.98213196 69.88729095]
[-102.98872375 70.33178711]
[-87.99530792 70.77629089]
[-75.04434204 63.41954041]
[-61.47951508 71.56238556]
[-58.59945297 69.27204895]
[-54.41263580 68.35439301]
[-49.62163162 69.43286133]
[-45.19107056 72.77147675]
[-30.29635620 74.54557800]
[-15.40163898 76.31967163]
[-0.50692260 78.09377289]
[14.38779354 79.86786652]
[21.51618576 77.49559784]
[29.69518661 81.92160034]
[44.53078842 84.13629913]
[59.36639404 86.35099792]
[74.20199585 88.56569672]
[89.03759766 90.78039551]
[102.11488342 85.83304596]
[113.17710114 94.38400269]
[128.01271057 96.59870148]
[142.84831238 98.81340027]
[157.76766968 100.36659241]
[172.74133301 101.25519562]
[181.24581909 88.54216766]
[194.88177490 81.83715820]
[209.94293213 82.85100555]
[222.39114380 91.21152496]
[228.93907166 104.59024811]
[243.91271973 105.47885132]
[258.88638306 106.36746216]
[273.86004639 107.25607300]
[288.83367920 108.14468384]
[303.80734253 109.03329468]
[313.68566895 97.21275330]
[328.45748901 93.51860809]
[342.40707397 99.16421509]
[350.26339722 111.79022217]
[365.23706055 112.67882538]
[380.21072388 113.56743622]
[395.18435669 114.45604706]
[410.15802002 115.34465790]
[425.13168335 116.23326874]
[439.54428101 108.40963745]
[453.38272095 117.20901489]
[452.41122437 133.57936096]
[437.62918091 140.68026733]
[424.24307251 131.20692444]
[409.26940918 130.31831360]
[394.29574585 129.42970276]
[379.32211304 128.54109192]
[364.34844971 127.65248108]
[349.37478638 126.76387787]
[340.08029175 138.37207031]
[325.56088257 142.32818604]
[311.32965088 136.91285706]
[302.91873169 124.00695038]
[287.94506836 123.11833954]
[272.97143555 122.22972870]
[257.99777222 121.34111786]
[243.02410889 120.45250702]
[228.05046082 119.56390381]
[219.96614075 132.07427979]
[206.61648560 138.90382385]
[191.54113770 138.12922668]
[178.79389954 129.85850525]
[171.85272217 116.22885132]
[156.87907410 115.34024811]
[153.93240356 117.54422760]
[149.72023010 118.33741760]
] def
/pairs [
[1 57]
[2 56]
[3 55]
[5 53]
[6 52]
[7 51]
[8 50]
[9 49]
[10 47]
[11 46]
[12 45]
[13 44]
[14 43]
[15 39]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[24 30]
[25 29]
[58 103]
[59 102]
[64 97]
[65 96]
[66 95]
[67 94]
[68 93]
[69 92]
[73 88]
[74 87]
[75 86]
[76 85]
[77 84]
[78 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
