%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.1
%%CreationDate: Mon Sep  4 18:04:43 2017
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GAUUUGGGGAGUAGCCGAUUUCCGAAAGGAAAUGUACGUGUCAACAUUUUCGUUGAAAAACGUGGCACGUACGGACUGAAGAAAUUCAGUCAGGCGAGACCAUAUCC\
) def
/coor [
[93.44050598 304.82754517]
[93.00423431 289.83389282]
[92.56796265 274.84024048]
[84.46376801 262.34338379]
[91.79641724 248.32402039]
[91.36014557 233.33036804]
[90.92388153 218.33671570]
[79.07489014 213.48902893]
[69.94393158 204.44842529]
[64.94210815 192.56140137]
[64.86170197 179.61805725]
[69.75092316 167.58253479]
[78.90108490 158.29498291]
[90.94915009 153.19018555]
[91.38542175 138.19653320]
[91.82169342 123.20287323]
[76.89537048 114.96639252]
[69.64817047 97.49587250]
[54.70524597 98.80320740]
[39.76232529 100.11054993]
[24.81940651 101.41788483]
[9.87648487 102.72521973]
[-5.06643534 104.03255463]
[-18.18216324 113.87683105]
[-33.15716553 107.19242096]
[-34.58644485 90.85567474]
[-20.99968147 81.67243958]
[-6.37377167 89.08963776]
[8.56914902 87.78229523]
[23.51206970 86.47496033]
[38.45499039 85.16762543]
[53.39791107 83.86029053]
[68.34082794 82.55295563]
[78.14874268 71.20373535]
[77.27657318 56.22911072]
[76.40439606 41.25448608]
[75.53222656 26.27986526]
[74.66005707 11.30524349]
[73.78787994 -3.66937923]
[72.91571045 -18.64400101]
[72.04354095 -33.61862564]
[71.17136383 -48.59324646]
[70.29919434 -63.56786728]
[57.40251923 -71.99295044]
[52.00281906 -86.23011017]
[55.97487259 -100.74516296]
[67.59326172 -110.02692413]
[66.72108459 -125.00154114]
[65.84891510 -139.97616577]
[64.97674561 -154.95079041]
[64.10456848 -169.92541504]
[57.14749527 -185.38618469]
[70.07814789 -196.35133362]
[84.19434357 -186.96148682]
[79.07919312 -170.79757690]
[79.95136261 -155.82296753]
[80.82353973 -140.84834290]
[81.69570923 -125.87371826]
[82.56788635 -110.89909363]
[95.18525696 -103.02890778]
[100.81555176 -89.07312775]
[97.10519409 -74.30537415]
[85.27381134 -64.44004059]
[86.14598846 -49.46541977]
[87.01815796 -34.49079514]
[87.89033508 -19.51617432]
[88.76250458 -4.54155159]
[89.63467407 10.43307114]
[90.50685120 25.40769386]
[91.37902069 40.38231659]
[92.25119781 55.35693741]
[93.12336731 70.33155823]
[114.62877655 76.68014526]
[123.99542999 94.57067871]
[138.93835449 95.87801361]
[153.88127136 97.18534851]
[168.82418823 98.49269104]
[183.76710510 99.80002594]
[198.71003723 101.10736084]
[213.65295410 102.41469574]
[228.27886963 94.99749756]
[241.86563110 104.18074036]
[240.43634033 120.51748657]
[225.46134949 127.20188904]
[212.34561157 117.35762024]
[197.40269470 116.05027771]
[182.45977783 114.74294281]
[167.51686096 113.43560791]
[152.57392883 112.12827301]
[137.63101196 110.82093811]
[122.68809509 109.51360321]
[116.35530090 118.37830353]
[106.81534576 123.63914490]
[106.37907410 138.63279724]
[105.94280243 153.62644958]
[121.02501678 162.38316345]
[129.63369751 177.44914246]
[129.52117920 194.71286011]
[120.80609131 209.51376343]
[105.91753387 217.90043640]
[106.35380554 232.89408875]
[106.79007721 247.88774109]
[114.92547607 261.45703125]
[107.56161499 274.40396118]
[107.99788666 289.39761353]
[108.43415833 304.39126587]
[111.18417358 323.57687378]
] def
/pairs [
[1 106]
[2 105]
[3 104]
[5 102]
[6 101]
[7 100]
[14 95]
[15 94]
[16 93]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[23 28]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[40 66]
[41 65]
[42 64]
[43 63]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[74 91]
[75 90]
[76 89]
[77 88]
[78 87]
[79 86]
[80 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
